<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | nyan~]]></title>
  <link href="http://eyan0221.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://eyan0221.github.io/"/>
  <updated>2014-10-30T09:26:47+08:00</updated>
  <id>http://eyan0221.github.io/</id>
  <author>
    <name><![CDATA[Emma Yan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android Window System]]></title>
    <link href="http://eyan0221.github.io/blog/2014/10/29/android-window-system/"/>
    <updated>2014-10-29T14:55:34+08:00</updated>
    <id>http://eyan0221.github.io/blog/2014/10/29/android-window-system</id>
    <content type="html"><![CDATA[<h2>Reference</h2>

<ul>
<li><a href="https://charleszblog.wordpress.com/2014/02/20/understanding-android-internals-graphics-basics-i/">Understanding Android Internals - Graphics Basics I</a></li>
<li><a href="https://charleszblog.wordpress.com/2014/02/20/understanding-android-internals-graphics-basicsii/">Understanding Android Internals - Graphics Basics II</a></li>
</ul>


<h2>Class Diagram</h2>

<p><img src="/images/20141029-class-diagram.png"></p>

<h2>Abstract Window Prototype</h2>

<h3><a href="https://android.googlesource.com/platform/system/core/+/android-l-preview_r2/include/system/window.h">android_native_base_t </a></h3>

<p><figure class='code'><figcaption><span>system/core/include/system/window.h </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="kt">android_native_base_t</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">a</span> <span class="n">magic</span> <span class="n">value</span> <span class="n">defined</span> <span class="n">by</span> <span class="n">the</span> <span class="n">actual</span> <span class="n">EGL</span> <span class="n">native</span> <span class="n">type</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">magic</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/* the sizeof() of the actual EGL native type */</span>
</span><span class='line'><span class="kt">int</span> <span class="n">version</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span><span class="o">*</span> <span class="n">reserved</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* reference-counting interface */</span>
</span><span class='line'><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">incRef</span><span class="p">)(</span><span class="k">struct</span> <span class="kt">android_native_base_t</span><span class="o">*</span> <span class="n">base</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">decRef</span><span class="p">)(</span><span class="k">struct</span> <span class="kt">android_native_base_t</span><span class="o">*</span> <span class="n">base</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span> <span class="kt">android_native_base_t</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3><a href="https://android.googlesource.com/platform/system/core/+/android-l-preview_r2/include/system/window.h">ANativeWindow</a></h3>

<p><figure class='code'><figcaption><span>system/core/include/system/window.h </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">ANativeWindow</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">ifdef</span> <span class="n">__cplusplus</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ANativeWindow</span><span class="p">()</span>
</span><span class='line'>    <span class="o">:</span> <span class="n">flags</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">minSwapInterval</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">maxSwapInterval</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">xdpi</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">ydpi</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">common</span><span class="p">.</span><span class="n">magic</span> <span class="o">=</span> <span class="n">ANDROID_NATIVE_WINDOW_MAGIC</span><span class="p">;</span>
</span><span class='line'>    <span class="n">common</span><span class="p">.</span><span class="n">version</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">ANativeWindow</span><span class="p">);</span>
</span><span class='line'>    <span class="n">memset</span><span class="p">(</span><span class="n">common</span><span class="p">.</span><span class="n">reserved</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">common</span><span class="p">.</span><span class="n">reserved</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Implement the methods that sp&amp;lt;ANativeWindow&amp;gt; expects so that it</span>
</span><span class='line'><span class="cm">   can be used to automatically refcount ANativeWindow&#39;s. */</span>
</span><span class='line'><span class="kt">void</span> <span class="n">incStrong</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span><span class="o">*</span> <span class="cm">/*id*/</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">common</span><span class="p">.</span><span class="n">incRef</span><span class="p">(</span><span class="n">const_cast</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">android_native_base_t</span><span class="o">*&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">common</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="n">decStrong</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span><span class="o">*</span> <span class="cm">/*id*/</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">common</span><span class="p">.</span><span class="n">decRef</span><span class="p">(</span><span class="n">const_cast</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">android_native_base_t</span><span class="o">*&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">common</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">struct</span> <span class="kt">android_native_base_t</span> <span class="n">common</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* flags describing some attributes of this surface or its updater */</span>
</span><span class='line'><span class="k">const</span> <span class="kt">uint32_t</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* min swap interval supported by this updated */</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span>   <span class="n">minSwapInterval</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* max swap interval supported by this updated */</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span>   <span class="n">maxSwapInterval</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* horizontal and vertical resolution in DPI */</span>
</span><span class='line'><span class="k">const</span> <span class="kt">float</span> <span class="n">xdpi</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">float</span> <span class="n">ydpi</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Some storage reserved for the OEM&#39;s driver. */</span>
</span><span class='line'><span class="kt">intptr_t</span>    <span class="n">oem</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Set the swap interval for this surface.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Returns 0 on success or -errno on error.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span>     <span class="p">(</span><span class="o">*</span><span class="n">setSwapInterval</span><span class="p">)(</span><span class="k">struct</span> <span class="n">ANativeWindow</span><span class="o">*</span> <span class="n">window</span><span class="p">,</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">interval</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * hook used to retrieve information about the native window.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Returns 0 on success or -errno on error.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span>     <span class="p">(</span><span class="o">*</span><span class="n">query</span><span class="p">)(</span><span class="k">const</span> <span class="k">struct</span> <span class="n">ANativeWindow</span><span class="o">*</span> <span class="n">window</span><span class="p">,</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">what</span><span class="p">,</span> <span class="kt">int</span><span class="o">*</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * hook used to perform various operations on the surface.</span>
</span><span class='line'><span class="cm"> * (*perform)() is a generic mechanism to add functionality to</span>
</span><span class='line'><span class="cm"> * ANativeWindow while keeping backward binary compatibility.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * DO NOT CALL THIS HOOK DIRECTLY.  Instead, use the helper functions</span>
</span><span class='line'><span class="cm"> * defined below.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *  (*perform)() returns -ENOENT if the &#39;what&#39; parameter is not supported</span>
</span><span class='line'><span class="cm"> *  by the surface&#39;s implementation.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * The valid operations are:</span>
</span><span class='line'><span class="cm"> *     NATIVE_WINDOW_SET_USAGE</span>
</span><span class='line'><span class="cm"> *     NATIVE_WINDOW_CONNECT               (deprecated)</span>
</span><span class='line'><span class="cm"> *     NATIVE_WINDOW_DISCONNECT            (deprecated)</span>
</span><span class='line'><span class="cm"> *     NATIVE_WINDOW_SET_CROP              (private)</span>
</span><span class='line'><span class="cm"> *     NATIVE_WINDOW_SET_BUFFER_COUNT</span>
</span><span class='line'><span class="cm"> *     NATIVE_WINDOW_SET_BUFFERS_GEOMETRY  (deprecated)</span>
</span><span class='line'><span class="cm"> *     NATIVE_WINDOW_SET_BUFFERS_TRANSFORM</span>
</span><span class='line'><span class="cm"> *     NATIVE_WINDOW_SET_BUFFERS_TIMESTAMP</span>
</span><span class='line'><span class="cm"> *     NATIVE_WINDOW_SET_BUFFERS_DIMENSIONS</span>
</span><span class='line'><span class="cm"> *     NATIVE_WINDOW_SET_BUFFERS_FORMAT</span>
</span><span class='line'><span class="cm"> *     NATIVE_WINDOW_SET_SCALING_MODE       (private)</span>
</span><span class='line'><span class="cm"> *     NATIVE_WINDOW_LOCK                   (private)</span>
</span><span class='line'><span class="cm"> *     NATIVE_WINDOW_UNLOCK_AND_POST        (private)</span>
</span><span class='line'><span class="cm"> *     NATIVE_WINDOW_API_CONNECT            (private)</span>
</span><span class='line'><span class="cm"> *     NATIVE_WINDOW_API_DISCONNECT         (private)</span>
</span><span class='line'><span class="cm"> *     NATIVE_WINDOW_SET_BUFFERS_USER_DIMENSIONS (private)</span>
</span><span class='line'><span class="cm"> *     NATIVE_WINDOW_SET_POST_TRANSFORM_CROP (private)</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>     <span class="p">(</span><span class="o">*</span><span class="n">perform</span><span class="p">)(</span><span class="k">struct</span> <span class="n">ANativeWindow</span><span class="o">*</span> <span class="n">window</span><span class="p">,</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">operation</span><span class="p">,</span> <span class="p">...</span> <span class="p">);</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Hook called by EGL to acquire a buffer. This call may block if no</span>
</span><span class='line'><span class="cm"> * buffers are available.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * The window holds a reference to the buffer between dequeueBuffer and</span>
</span><span class='line'><span class="cm"> * either queueBuffer or cancelBuffer, so clients only need their own</span>
</span><span class='line'><span class="cm"> * reference if they might use the buffer after queueing or canceling it.</span>
</span><span class='line'><span class="cm"> * Holding a reference to a buffer after queueing or canceling it is only</span>
</span><span class='line'><span class="cm"> * allowed if a specific buffer count has been set.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * The libsync fence file descriptor returned in the int pointed to by the</span>
</span><span class='line'><span class="cm"> * fenceFd argument will refer to the fence that must signal before the</span>
</span><span class='line'><span class="cm"> * dequeued buffer may be written to.  A value of -1 indicates that the</span>
</span><span class='line'><span class="cm"> * caller may access the buffer immediately without waiting on a fence.  If</span>
</span><span class='line'><span class="cm"> * a valid file descriptor is returned (i.e. any value except -1) then the</span>
</span><span class='line'><span class="cm"> * caller is responsible for closing the file descriptor.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Returns 0 on success or -errno on error.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span>     <span class="p">(</span><span class="o">*</span><span class="n">dequeueBuffer</span><span class="p">)(</span><span class="k">struct</span> <span class="n">ANativeWindow</span><span class="o">*</span> <span class="n">window</span><span class="p">,</span>
</span><span class='line'>            <span class="k">struct</span> <span class="n">ANativeWindowBuffer</span><span class="o">**</span> <span class="n">buffer</span><span class="p">,</span> <span class="kt">int</span><span class="o">*</span> <span class="n">fenceFd</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Hook called by EGL when modifications to the render buffer are done.</span>
</span><span class='line'><span class="cm"> * This unlocks and post the buffer.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * The window holds a reference to the buffer between dequeueBuffer and</span>
</span><span class='line'><span class="cm"> * either queueBuffer or cancelBuffer, so clients only need their own</span>
</span><span class='line'><span class="cm"> * reference if they might use the buffer after queueing or canceling it.</span>
</span><span class='line'><span class="cm"> * Holding a reference to a buffer after queueing or canceling it is only</span>
</span><span class='line'><span class="cm"> * allowed if a specific buffer count has been set.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * The fenceFd argument specifies a libsync fence file descriptor for a</span>
</span><span class='line'><span class="cm"> * fence that must signal before the buffer can be accessed.  If the buffer</span>
</span><span class='line'><span class="cm"> * can be accessed immediately then a value of -1 should be used.  The</span>
</span><span class='line'><span class="cm"> * caller must not use the file descriptor after it is passed to</span>
</span><span class='line'><span class="cm"> * queueBuffer, and the ANativeWindow implementation is responsible for</span>
</span><span class='line'><span class="cm"> * closing it.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Returns 0 on success or -errno on error.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span>     <span class="p">(</span><span class="o">*</span><span class="n">queueBuffer</span><span class="p">)(</span><span class="k">struct</span> <span class="n">ANativeWindow</span><span class="o">*</span> <span class="n">window</span><span class="p">,</span>
</span><span class='line'>            <span class="k">struct</span> <span class="n">ANativeWindowBuffer</span><span class="o">*</span> <span class="n">buffer</span><span class="p">,</span> <span class="kt">int</span> <span class="n">fenceFd</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Hook used to cancel a buffer that has been dequeued.</span>
</span><span class='line'><span class="cm"> * No synchronization is performed between dequeue() and cancel(), so</span>
</span><span class='line'><span class="cm"> * either external synchronization is needed, or these functions must be</span>
</span><span class='line'><span class="cm"> * called from the same thread.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * The window holds a reference to the buffer between dequeueBuffer and</span>
</span><span class='line'><span class="cm"> * either queueBuffer or cancelBuffer, so clients only need their own</span>
</span><span class='line'><span class="cm"> * reference if they might use the buffer after queueing or canceling it.</span>
</span><span class='line'><span class="cm"> * Holding a reference to a buffer after queueing or canceling it is only</span>
</span><span class='line'><span class="cm"> * allowed if a specific buffer count has been set.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * The fenceFd argument specifies a libsync fence file decsriptor for a</span>
</span><span class='line'><span class="cm"> * fence that must signal before the buffer can be accessed.  If the buffer</span>
</span><span class='line'><span class="cm"> * can be accessed immediately then a value of -1 should be used.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Note that if the client has not waited on the fence that was returned</span>
</span><span class='line'><span class="cm"> * from dequeueBuffer, that same fence should be passed to cancelBuffer to</span>
</span><span class='line'><span class="cm"> * ensure that future uses of the buffer are preceded by a wait on that</span>
</span><span class='line'><span class="cm"> * fence.  The caller must not use the file descriptor after it is passed</span>
</span><span class='line'><span class="cm"> * to cancelBuffer, and the ANativeWindow implementation is responsible for</span>
</span><span class='line'><span class="cm"> * closing it.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Returns 0 on success or -errno on error.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span>     <span class="p">(</span><span class="o">*</span><span class="n">cancelBuffer</span><span class="p">)(</span><span class="k">struct</span> <span class="n">ANativeWindow</span><span class="o">*</span> <span class="n">window</span><span class="p">,</span>
</span><span class='line'>            <span class="k">struct</span> <span class="n">ANativeWindowBuffer</span><span class="o">*</span> <span class="n">buffer</span><span class="p">,</span> <span class="kt">int</span> <span class="n">fenceFd</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3><a href="https://android.googlesource.com/platform/frameworks/native/+/android-l-preview_r2/opengl/include/EGL/eglplatform.h">EGLNativeWindowType</a></h3>

<p><figure class='code'><figcaption><span>frameworks/native/opengl/include/EGL/eglplatform.h </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">defined</span><span class="p">(</span><span class="n">_WIN32</span><span class="p">)</span> <span class="o">||</span> <span class="n">defined</span><span class="p">(</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">VC32</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">!</span><span class="n">defined</span><span class="p">(</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">CYGWIN</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">!</span><span class="n">defined</span><span class="p">(</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">SCITECH_SNAP</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Win32</span> <span class="n">and</span> <span class="n">WinCE</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">elif</span> <span class="n">defined</span><span class="p">(</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">ANDROID</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">||</span> <span class="n">defined</span><span class="p">(</span><span class="n">ANDROID</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">typedef</span> <span class="k">struct</span> <span class="n">ANativeWindow</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span>           <span class="n">EGLNativeWindowType</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="kt">egl_native_pixmap_t</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span>     <span class="n">EGLNativePixmapType</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">void</span><span class="o">*</span>                           <span class="n">EGLNativeDisplayType</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">EGL</span> <span class="mf">1.2</span> <span class="n">types</span><span class="p">,</span> <span class="n">renamed</span> <span class="k">for</span> <span class="n">consistency</span> <span class="n">in</span> <span class="n">EGL</span> <span class="mf">1.3</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">EGLNativeDisplayType</span> <span class="n">NativeDisplayType</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">EGLNativePixmapType</span>  <span class="n">NativePixmapType</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">EGLNativeWindowType</span>  <span class="n">NativeWindowType</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Native Graphic Buffer Handle</h2>

<h3><a href="https://android.googlesource.com/platform/system/core/+/android-l-preview_r2/include/cutils/native_handle.h">native_handle</a></h3>

<p><figure class='code'><figcaption><span>system/core/include/cutils/native_handle.h </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">native_handle</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">version</span><span class="p">;</span>        <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">native_handle_t</span><span class="p">)</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">numFds</span><span class="p">;</span>         <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">number</span> <span class="n">of</span> <span class="n">file</span><span class="o">-</span><span class="n">descriptors</span> <span class="n">at</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">numInts</span><span class="p">;</span>        <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">number</span> <span class="n">of</span> <span class="n">ints</span> <span class="n">at</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">data</span><span class="p">[</span><span class="n">numFds</span><span class="p">]</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>        <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">numFds</span> <span class="o">+</span> <span class="n">numInts</span> <span class="n">ints</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="p">}</span> <span class="kt">native_handle_t</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3><a href="https://android.googlesource.com/platform/system/core/+/android-l-preview_r2/include/system/window.h">ANativeWindowBuffer</a></h3>

<p>android_native_base_t, native_handle</p>

<p><figure class='code'><figcaption><span>system/core/include/system/window.h </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="k">const</span> <span class="kt">native_handle_t</span><span class="o">*</span> <span class="kt">buffer_handle_t</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">typedef</span> <span class="k">struct</span> <span class="n">ANativeWindowBuffer</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">ifdef</span> <span class="n">__cplusplus</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ANativeWindowBuffer</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">common</span><span class="p">.</span><span class="n">magic</span> <span class="o">=</span> <span class="n">ANDROID_NATIVE_BUFFER_MAGIC</span><span class="p">;</span>
</span><span class='line'>    <span class="n">common</span><span class="p">.</span><span class="n">version</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">ANativeWindowBuffer</span><span class="p">);</span>
</span><span class='line'>    <span class="n">memset</span><span class="p">(</span><span class="n">common</span><span class="p">.</span><span class="n">reserved</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">common</span><span class="p">.</span><span class="n">reserved</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Implement the methods that sp&amp;lt;ANativeWindowBuffer&amp;gt; expects so that it</span>
</span><span class='line'><span class="c1">// can be used to automatically refcount ANativeWindowBuffer&#39;s.</span>
</span><span class='line'><span class="kt">void</span> <span class="n">incStrong</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span><span class="o">*</span> <span class="cm">/*id*/</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">common</span><span class="p">.</span><span class="n">incRef</span><span class="p">(</span><span class="n">const_cast</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">android_native_base_t</span><span class="o">*&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">common</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="n">decStrong</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span><span class="o">*</span> <span class="cm">/*id*/</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">common</span><span class="p">.</span><span class="n">decRef</span><span class="p">(</span><span class="n">const_cast</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">android_native_base_t</span><span class="o">*&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">common</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">struct</span> <span class="kt">android_native_base_t</span> <span class="n">common</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">width</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">height</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">stride</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">format</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">usage</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span><span class="o">*</span> <span class="n">reserved</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kt">buffer_handle_t</span> <span class="n">handle</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span><span class="o">*</span> <span class="n">reserved_proc</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span> <span class="n">ANativeWindowBuffer_t</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2><a href="https://android.googlesource.com/platform/system/core/+/android-l-preview_r2/include/utils/Flattenable.h">Flattenable</a></h2>

<p><figure class='code'><figcaption><span>system/core/include/utils/Flattenable.h </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'> <span class="o">*</span> <span class="n">The</span> <span class="n">Flattenable</span> <span class="n">protocol</span> <span class="n">allows</span> <span class="n">an</span> <span class="n">object</span> <span class="n">to</span> <span class="n">serialize</span> <span class="n">itself</span> <span class="n">out</span>
</span><span class='line'> <span class="o">*</span> <span class="n">to</span> <span class="n">a</span> <span class="n">byte</span><span class="o">-</span><span class="n">buffer</span> <span class="n">and</span> <span class="n">an</span> <span class="n">array</span> <span class="n">of</span> <span class="n">file</span> <span class="n">descriptors</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span> <span class="n">Flattenable</span> <span class="n">objects</span> <span class="n">must</span> <span class="n">implement</span> <span class="n">this</span> <span class="n">protocol</span><span class="p">.</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">template</span> <span class="o">&lt;</span><span class="kr">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">class</span> <span class="n">Flattenable</span> <span class="p">{</span>
</span><span class='line'><span class="nl">public</span><span class="p">:</span>
</span><span class='line'>    <span class="c1">// size in bytes of the flattened object</span>
</span><span class='line'>    <span class="kr">inline</span> <span class="kt">size_t</span> <span class="n">getFlattenedSize</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// number of file descriptors to flatten</span>
</span><span class='line'><span class="kr">inline</span> <span class="kt">size_t</span> <span class="n">getFdCount</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// flattens the object into buffer.</span>
</span><span class='line'><span class="c1">// size should be at least of getFlattenedSize()</span>
</span><span class='line'><span class="c1">// file descriptors are written in the fds[] array but ownership is</span>
</span><span class='line'><span class="c1">// not transfered (ie: they must be dupped by the caller of</span>
</span><span class='line'><span class="c1">// flatten() if needed).</span>
</span><span class='line'><span class="kr">inline</span> <span class="kt">status_t</span> <span class="n">flatten</span><span class="p">(</span><span class="kt">void</span><span class="o">*&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">buffer</span><span class="p">,</span> <span class="kt">size_t</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">size</span><span class="p">,</span> <span class="kt">int</span><span class="o">*&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">fds</span><span class="p">,</span> <span class="kt">size_t</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">count</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// unflattens the object from buffer.</span>
</span><span class='line'><span class="c1">// size should be equal to the value of getFlattenedSize() when the</span>
</span><span class='line'><span class="c1">// object was flattened.</span>
</span><span class='line'><span class="c1">// unflattened file descriptors are found in the fds[] array and</span>
</span><span class='line'><span class="c1">// don&#39;t need to be dupped(). ie: the caller of unflatten doesn&#39;t</span>
</span><span class='line'><span class="c1">// keep ownership. If a fd is not retained by unflatten() it must be</span>
</span><span class='line'><span class="c1">// explicitly closed.</span>
</span><span class='line'><span class="kr">inline</span> <span class="kt">status_t</span> <span class="n">unflatten</span><span class="p">(</span><span class="kt">void</span> <span class="k">const</span><span class="o">*&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">buffer</span><span class="p">,</span> <span class="kt">size_t</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">size</span><span class="p">,</span> <span class="kt">int</span> <span class="k">const</span><span class="o">*&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">fds</span><span class="p">,</span> <span class="kt">size_t</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">count</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2><a href="https://android.googlesource.com/platform/frameworks/native/+/android-l-preview_r2/include/ui/GraphicBuffer.h">GraphicBuffer</a></h2>

<p><figure class='code'><figcaption><span>frameworks/native/include/ui/GraphicBuffer.h </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">class</span> <span class="nl">GraphicBuffer</span>
</span><span class='line'>    <span class="p">:</span> <span class="n">public</span> <span class="n">ANativeObjectBase</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">ANativeWindowBuffer</span><span class="p">,</span> <span class="n">GraphicBuffer</span><span class="p">,</span> <span class="n">RefBase</span> <span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">public</span> <span class="n">Flattenable</span><span class="o">&lt;</span><span class="n">GraphicBuffer</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">friend</span> <span class="n">class</span> <span class="n">Flattenable</span><span class="o">&lt;</span><span class="n">GraphicBuffer</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'><span class="nl">private</span><span class="p">:</span>
</span><span class='line'>    <span class="n">GraphicBufferMapper</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">mBufferMapper</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sp</span><span class="o">&lt;</span><span class="n">ANativeWindowBuffer</span><span class="o">&gt;</span> <span class="n">mWrappedBuffer</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2><a href="https://android.googlesource.com/platform/frameworks/native/+/android-l-preview_r2/include/gui/Surface.h">Surface</a></h2>

<p><figure class='code'><figcaption><span>frameworks/native/include/gui/Surface.h </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'> <span class="o">*</span> <span class="n">An</span> <span class="n">implementation</span> <span class="n">of</span> <span class="n">ANativeWindow</span> <span class="n">that</span> <span class="n">feeds</span> <span class="n">graphics</span> <span class="n">buffers</span> <span class="n">into</span> <span class="n">a</span>
</span><span class='line'> <span class="o">*</span> <span class="n">BufferQueue</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span>
</span><span class='line'> <span class="o">*</span> <span class="n">This</span> <span class="n">is</span> <span class="n">typically</span> <span class="n">used</span> <span class="n">by</span> <span class="n">programs</span> <span class="n">that</span> <span class="n">want</span> <span class="n">to</span> <span class="n">render</span> <span class="n">frames</span> <span class="n">through</span>
</span><span class='line'> <span class="o">*</span> <span class="n">some</span> <span class="n">means</span> <span class="p">(</span><span class="n">maybe</span> <span class="n">OpenGL</span><span class="p">,</span> <span class="n">a</span> <span class="n">software</span> <span class="n">renderer</span><span class="p">,</span> <span class="n">or</span> <span class="n">a</span> <span class="n">hardware</span> <span class="n">decoder</span><span class="p">)</span>
</span><span class='line'> <span class="o">*</span> <span class="n">and</span> <span class="n">have</span> <span class="n">the</span> <span class="n">frames</span> <span class="n">they</span> <span class="n">create</span> <span class="n">forwarded</span> <span class="n">to</span> <span class="n">SurfaceFlinger</span> <span class="k">for</span>
</span><span class='line'> <span class="o">*</span> <span class="n">compositing</span><span class="p">.</span>  <span class="n">For</span> <span class="n">example</span><span class="p">,</span> <span class="n">a</span> <span class="n">video</span> <span class="n">decoder</span> <span class="n">could</span> <span class="n">render</span> <span class="n">a</span> <span class="n">frame</span> <span class="n">and</span> <span class="n">call</span>
</span><span class='line'> <span class="o">*</span> <span class="n">eglSwapBuffers</span><span class="p">(),</span> <span class="n">which</span> <span class="n">invokes</span> <span class="n">ANativeWindow</span> <span class="n">callbacks</span> <span class="n">defined</span> <span class="n">by</span>
</span><span class='line'> <span class="o">*</span> <span class="n">Surface</span><span class="p">.</span>  <span class="n">Surface</span> <span class="n">then</span> <span class="n">forwards</span> <span class="n">the</span> <span class="n">buffers</span> <span class="n">through</span> <span class="n">Binder</span> <span class="n">IPC</span>
</span><span class='line'> <span class="o">*</span> <span class="n">to</span> <span class="n">the</span> <span class="n">BufferQueue</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">producer</span> <span class="n">interface</span><span class="p">,</span> <span class="n">providing</span> <span class="n">the</span> <span class="n">new</span> <span class="n">frame</span> <span class="n">to</span> <span class="n">a</span>
</span><span class='line'> <span class="o">*</span> <span class="n">consumer</span> <span class="n">such</span> <span class="n">as</span> <span class="n">GLConsumer</span><span class="p">.</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="n">class</span> <span class="nl">Surface</span>
</span><span class='line'>    <span class="p">:</span> <span class="n">public</span> <span class="n">ANativeObjectBase</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">ANativeWindow</span><span class="p">,</span> <span class="n">Surface</span><span class="p">,</span> <span class="n">RefBase</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="nl">private</span><span class="p">:</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">BufferSlot</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">sp</span><span class="o">&lt;</span><span class="n">GraphicBuffer</span><span class="o">&gt;</span> <span class="n">buffer</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Region</span> <span class="n">dirtyRegion</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// mSurfaceTexture is the interface to the surface texture server. All</span>
</span><span class='line'><span class="c1">// operations on the surface texture client ultimately translate into</span>
</span><span class='line'><span class="c1">// interactions with the server using this interface.</span>
</span><span class='line'><span class="c1">// TODO: rename to mBufferProducer</span>
</span><span class='line'><span class="n">sp</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">IGraphicBufferProducer</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">mGraphicBufferProducer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// mSlots stores the buffers that have been allocated for each buffer slot.</span>
</span><span class='line'><span class="c1">// It is initialized to null pointers, and gets filled in with the result of</span>
</span><span class='line'><span class="c1">// IGraphicBufferProducer::requestBuffer when the client dequeues a buffer from a</span>
</span><span class='line'><span class="c1">// slot that has not yet been used. The buffer allocated to a slot will also</span>
</span><span class='line'><span class="c1">// be replaced if the requested buffer usage or geometry differs from that</span>
</span><span class='line'><span class="c1">// of the buffer allocated to a slot.</span>
</span><span class='line'><span class="n">BufferSlot</span> <span class="n">mSlots</span><span class="p">[</span><span class="n">NUM_BUFFER_SLOTS</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// must be used from the lock/unlock thread</span>
</span><span class='line'><span class="n">sp</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">GraphicBuffer</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>           <span class="n">mLockedBuffer</span><span class="p">;</span>
</span><span class='line'><span class="n">sp</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">GraphicBuffer</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>           <span class="n">mPostedBuffer</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SELinux for Android]]></title>
    <link href="http://eyan0221.github.io/blog/2014/10/28/selinux-for-android/"/>
    <updated>2014-10-28T12:02:35+08:00</updated>
    <id>http://eyan0221.github.io/blog/2014/10/28/selinux-for-android</id>
    <content type="html"><![CDATA[<h2>Reference</h2>

<ul>
<li><a href="http://selinuxproject.org/page/Main_Page">SELinux Project Wiki</a></li>
<li><a href="http://selinuxproject.org/page/NB_SEforAndroid_1">SE for Android</a></li>
<li><a href="http://seandroid.bitbucket.org/">Security Enhancements for Android</a></li>
<li><a href="http://source.android.com/devices/tech/security/se-linux.html">Validating Security-Enhanced Linux in Android</a></li>
<li><a href="http://www.youtube.com/watch?v=MxjenQ31b70">2012 Red Hat Summit: SELinux For Mere Mortals</a></li>
</ul>


<h2>Projects</h2>

<ul>
<li><a href="https://android.googlesource.com/platform/external/sepolicy/+/master/README">external/sepolicy/README</a></li>
<li>external/libselinux/</li>
<li>external/libsepol/</li>
<li>device/manufacturer/device-name/sepolicy</li>
</ul>


<h2>Control</h2>

<ul>
<li>Permissive mode
<figure class='code'><figcaption><span>BOARD_KERNEL_CMDLINE </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>androidboot.selinux=permissive</span></code></pre></td></tr></table></div></figure></li>
</ul>


<h2><a href="http://securityblog.org/2013/06/28/se-for-android-gs4-howto-and-exploit-demo/">HowTo</a></h2>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>reload policy&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>adb remount &amp;&amp; adb push sepolicy /data/security/
</span><span class='line'>adb shell setprop selinux.reload_policy &lt;0|1>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>toggle enforcing and permissive&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>adb shell setenforce &lt;0|1|permissive|enforcing>
</span><span class='line'>adb shell getenforce</span></code></pre></td></tr></table></div></figure></p>

<h2>Policy</h2>

<p>The policy rules come in the form: allow domains types:classes permissions;, where:</p>

<ul>
<li>Domain - A label for the process or set of processes.</li>
<li>Type - A label for the object (e.g. file, socket) or set of objects.</li>
<li>Class - The kind of object (e.g. file, socket) being accessed.</li>
<li>Permission - The operation (e.g. read, write) being performed.</li>
</ul>


<p>And so an example use of this would follow the structure:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>allow appdomain app_data_file:file rw_file_perms;</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tegra Graphics Debugger]]></title>
    <link href="http://eyan0221.github.io/blog/2014/09/11/tegra-graphics-debugger/"/>
    <updated>2014-09-11T11:13:25+08:00</updated>
    <id>http://eyan0221.github.io/blog/2014/09/11/tegra-graphics-debugger</id>
    <content type="html"><![CDATA[<h2>Overview</h2>

<p><a href="https://developer.nvidia.com/tegra-graphics-debugger">Tegra Graphics Debugger</a> is a free tool from NVIDIA for debugging and profiling OpenGL ES 2.0/3.0/3.1, OpenGL 4.x and <a href="http://www.pcper.com/news/General-Tech/Google-IO-2014-Android-Extension-Pack-Announced">Android Extension Pack</a>. Supported host OS are Windows 7/8, Mac OS X 10.9 and Ubuntu Linux x64 10.10/11.04/12.04. Supported target platform is <a href="http://en.wikipedia.org/wiki/Tegra#Tegra_K1">Tegra K1</a> Android.</p>

<p>As for <a href="https://developer.nvidia.com/nvidia-perfhud-es">PerfHUD ES</a>, it focus on Tegra Android platform before and include <a href="http://en.wikipedia.org/wiki/Tegra#Tegra_4">Tegra 4</a>.</p>

<p>In GTC 2014, there is a talk &ldquo;SG4116: Tegra K1 Developer Tools for Android, Sebastien Domine&rdquo; which gives introudction of Tegra Graphics Debugger. You may watch <a href="http://www.ustream.tv/recorded/51209645">online video</a> starting from 29:05 and download <a href="http://on-demand.gputechconf.com/gtc/2014/presentations/S4825-tegra-k1-dev-tools-for-android.pdf">presentation</a>.</p>

<h2>Getting Started</h2>

<p>Tegra Graphics Debugger is part of Tegra Android Development Pack which is free for <a href="https://developer.nvidia.com/gameworksdownload#?dn=tegra-android-development-pack-3-0r3">download</a>, but requires NVIDIA GameWorks <a href="https://developer.nvidia.com/sign-up-gameworks-registered-developer-program">Registered</a> Developer Program membership. You may check online document <a href="http://docs.nvidia.com/gameworks/index.html#developertools/mobile/tegra_graphics_debugger_main.htm%3FTocPath%3DDeveloper%2520Tools|Mobile%2520Developer%2520Tools|Tegra%2520Graphics%2520Debugger|_____0">here</a> or search below doc after installation.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~/NVPACK/Tegra_Graphics_Debugger/Tegra_Graphics_Debugger.pdf</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li><p>Launch Tegra Graphics Debugger
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/NVPACK/Tegra_Graphics_Debugger<span class="nv">$ </span>./tegra-gfx-debugger
</span></code></pre></td></tr></table></div></figure></p></li>
<li><p><strong>Performance Dashboard</strong> will be the first view after established connection to target device and launch application.</p></li>
<li><strong>Frame Debugger</strong>: Trigger the <strong>Capture Frame</strong> button.</li>
<li><strong>Frame Profiler</strong>: From the <strong>View</strong> menu, select <strong>Profiler</strong>.</li>
<li><strong>Dynamic Shader Editing</strong>: Open the <strong>API Inspector</strong>, navigate to the <strong>Program</strong> page.</li>
</ul>


<h2>Reference</h2>

<p><a href="http://on-demand-gtc.gputechconf.com/gtcnew/on-demand-gtc.php">GPU Technology Conference On-Demand</a> <br/>
<a href="https://developer.nvidia.com/tegra-android-development-pack">Tegra Android Development Pack</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android]]></title>
    <link href="http://eyan0221.github.io/blog/2014/09/09/android-tools/"/>
    <updated>2014-09-09T16:44:09+08:00</updated>
    <id>http://eyan0221.github.io/blog/2014/09/09/android-tools</id>
    <content type="html"><![CDATA[<h2><a href="https://source.android.com/source/build-numbers.html">Codenames</a></h2>

<h2><a href="https://www.google.com/events/io/">Google I/O</a></h2>

<ul>
<li><a href="https://developers.google.com/events/io/2013/sessions">2013</a></li>
<li><a href="https://developers.google.com/events/io/2012/">2012</a></li>
</ul>


<h2>Debug</h2>

<ul>
<li><a href="http://developer.android.com/tools/help/systrace.html">Systrace</a></li>
<li><a href="http://developer.android.com/tools/help/uiautomator/index.html">uiautomator</a></li>
<li><a href="http://sujaiantony.wordpress.com/">Memory leak debugging with libc</a></li>
<li><a href="http://elinux.org/Android_Memory_Usage">Android Memory Usage</a></li>
<li><a href="http://elinux.org/Android_logger">Logger</a></li>
<li><p><a href="http://stackoverflow.com/questions/1069066/how-can-i-get-the-current-stack-trace">CallStack in Java</a>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.lang.Thread</span>
</span><span class='line'><span class="n">Thread</span><span class="o">.</span><span class="na">dumpStack</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></p></li>
<li><p><a href="http://stackoverflow.com/questions/11470190/how-to-use-callstack-in-callstack-tpp-in-a-executable-on-android-platform">CallStack in C/C++</a>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">utils</span><span class="o">/</span><span class="n">CallStack</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">CallStack</span> <span class="n">stack</span><span class="p">;</span>
</span><span class='line'><span class="n">stack</span><span class="p">.</span><span class="n">dump</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;[</span><span class="n">log</span> <span class="n">prefix</span><span class="p">]</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span></code></pre></td></tr></table></div></figure></p></li>
<li><p>KeyEvent</p></li>
</ul>


<p>Find keycode in <a href="https://android.googlesource.com/platform/frameworks/base.git/+/076357b8567458d4b6dfdcf839ef751634cd2bfb/core/java/android/view/KeyEvent.java#27">frameworks/base/core/java/android/view/KeyEvent.java</a>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$adb</span> shell input keyevent <span class="o">[</span>key code<span class="o">]</span>
</span><span class='line'><span class="nv">$adb</span> shell input keyevent <span class="m">27</span>    <span class="c"># camera</span>
</span><span class='line'><span class="nv">$adb</span> shell input keyevent <span class="m">82</span>    <span class="c"># unlock screen</span>
</span><span class='line'><span class="nv">$adb</span> shell input text <span class="p">&amp;</span>ldquo<span class="p">;</span>ANDROID<span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="c"># input string</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Optimization</h2>

<ul>
<li><p><a href="http://www.slideshare.net/kanru/android-boot-time-optimization">Boot time</a></p></li>
<li><p><a href="http://elinux.org/Using_Bootchart_on_Android">bootchart</a></p></li>
</ul>


<p>Step1: Installing the bootchart tool</p>

<p>Download <a href="http://www.bootchart.org/download.html">bootchart</a></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$tar</span> xjf bootchart-0.9.tar.bz2
</span><span class='line'><span class="nv">$cd</span> bootchart-0.9
</span><span class='line'><span class="nv">$sudo</span> ./install.sh
</span></code></pre></td></tr></table></div></figure></p>

<p>Step2: Compile init with bootchart enabled and flash images</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$touch</span> <span class="o">[</span>mydroid<span class="o">]</span>/system/core/init/init.c
</span><span class='line'><span class="nv">$export</span> <span class="nv">INIT_BOOTCHART</span><span class="o">=</span><span class="nb">true</span>
</span><span class='line'><span class="nv">$m</span> init ramdisk bootimage
</span></code></pre></td></tr></table></div></figure></p>

<p>Step3: Trigger bootchart</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$adb</span> shell <span class="p">&amp;</span>lsquo<span class="p">;</span><span class="nb">echo </span><span class="m">20</span> &gt; /data/bootchart-start<span class="p">&amp;</span>rsquo<span class="p">;</span>
</span><span class='line'><span class="nv">$adb</span> shell mkdir /data/bootchart
</span></code></pre></td></tr></table></div></figure></p>

<p>Step4: Get bootchart.tgz</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$/</span>system/core/init/grab-bootchart.sh
</span></code></pre></td></tr></table></div></figure></p>

<p>Step5: Generate bootchart image</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$java</span> -jar <span class="o">[</span>path to bootchart<span class="o">]</span>/bootchart-0.9/bootchart.jar bootchart.tgz
</span></code></pre></td></tr></table></div></figure></p>

<h2>Display</h2>

<ul>
<li><p><a href="https://www.sven.de/dpi/">DPI Calculator</a></p></li>
<li><p>Display Timeout</p></li>
</ul>


<p><figure class='code'><figcaption><span>set display timeout and stay awake </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$adb</span> shell&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;sqlite3 /data/data/com.android.providers.settings/databases/settings.db&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;.databases&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;.tables&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;.dump&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;select * from &lt;table&gt;<span class="p">;</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;delete from &lt;table&gt; where &lt;condition&gt;<span class="p">;</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;update system <span class="nb">set </span><span class="nv">value</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span>1800000<span class="p">&amp;</span>rdquo<span class="p">;</span> where <span class="nv">name</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span>screen_off_timeout<span class="p">&amp;</span>rdquo<span class="p">;;</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;update system <span class="nb">set </span><span class="nv">value</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span>3<span class="p">&amp;</span>rdquo<span class="p">;</span> where <span class="nv">name</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span>stay_on_while_plugged_in<span class="p">&amp;</span>rdquo<span class="p">;;</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;.exit&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></p>

<h2>Code Snippet</h2>

<ul>
<li>Property Permission</li>
</ul>


<p><a href="https://android.googlesource.com/platform/system/core/+/fb1c9cf6fa4efafb3e0c6b0bc93c7f087d926a48/init/property_service.c#58">system/core/init/property_service.c</a></p>

<ul>
<li>Device ID
<figure class='code'><figcaption><span>Device ID </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$adb</span> shell cat /sys/class/android_usb/android0/iSerial
</span><span class='line'><span class="nv">$adb</span> shell getprop ro.serialno
</span></code></pre></td></tr></table></div></figure></li>
</ul>


<p><figure class='code'><figcaption><span>out/target/product/[target name]/recovery/root/init.rc </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">write</span> <span class="o">/</span><span class="n">sys</span><span class="o">/</span><span class="n">class</span><span class="o">/</span><span class="n">android_usb</span><span class="o">/</span><span class="n">android0</span><span class="o">/</span><span class="n">iSerial</span> <span class="err">$</span><span class="p">{</span><span class="n">ro</span><span class="p">.</span><span class="n">serialno</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>system/core/init/init.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">property_set</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">ro</span><span class="p">.</span><span class="n">serialno</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Others</h2>

<p><figure class='code'><figcaption><span>Open Browser with url </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$adb</span> shell am start <span class="o">[</span>url<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>Start Java App </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$adb</span> shell am start -n <span class="o">[</span>com.package.name<span class="o">]</span>/<span class="o">[</span>com.package.name.ActivityName<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>Playback Video </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$adb</span> shell am start -a android.intent.action.VIEW -d ////<span class="o">[</span>path to video<span class="o">]</span>/<span class="o">[</span>video file name<span class="o">]</span> -t video/* -n com.android.gallery3d/.app.MovieActivity
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SurfaceFlinger]]></title>
    <link href="http://eyan0221.github.io/blog/2014/09/09/surfaceflinger/"/>
    <updated>2014-09-09T15:54:50+08:00</updated>
    <id>http://eyan0221.github.io/blog/2014/09/09/surfaceflinger</id>
    <content type="html"><![CDATA[<h2>Dump of SERVICE SurfaceFlinger</h2>

<p>Find more information about <a href="https://source.android.com/devices/tech/input/dumpsys.html">dumpsys</a></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adb shell dumpsys SurfaceFlinger
</span></code></pre></td></tr></table></div></figure></p>

<h2>Frame Latency</h2>

<p><figure class='code'><figcaption><span>Prints information about last 128 frames displayed in specific window </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adb shell dumpsys SurfaceFlinger <span class="p">&amp;</span>ndash<span class="p">;</span>latency <span class="o">[</span>window name<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>According to <a href="https://android.googlesource.com/platform/external/chromium_org/+/d0247b1/build/android/pylib/perf/surface_stats_collector.py#215">output definitive</a>,
The data returned looks like this:
<code>
16954612
7657467895508 7657482691352 7657493499756
7657484466553 7657499645964 7657511077881
7657500793457 7657516600576 7657527404785
(...)
</code></p>

<p>The first line is the refresh period (here 16.95 ms), it is followed
by 128 lines w/ 3 timestamps in nanosecond each:</p>

<p>A) when the app started to draw <br/>
B) the vsync immediately preceding SF submitting the frame to the h/w <br/>
C) timestamp immediately after SF submitted that frame to the h/w <br/></p>

<p>The difference between the 1st and 3rd timestamp is the frame-latency.</p>

<h2>Observe composite rate in logcat</h2>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adb shell service call SurfaceFlinger <span class="m">1001</span> i32 1
</span></code></pre></td></tr></table></div></figure></p>

<h2>Force using SurfaceFlinger as compositor</h2>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adb shell service call SurfaceFlinger <span class="m">1008</span> i32 1
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
</feed>
