<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | nyan~]]></title>
  <link href="http://eyan0221.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://eyan0221.github.io/"/>
  <updated>2014-10-31T11:33:08+08:00</updated>
  <id>http://eyan0221.github.io/</id>
  <author>
    <name><![CDATA[Emma Yan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android Window System]]></title>
    <link href="http://eyan0221.github.io/blog/2014/10/29/android-window-system/"/>
    <updated>2014-10-29T14:55:34+08:00</updated>
    <id>http://eyan0221.github.io/blog/2014/10/29/android-window-system</id>
    <content type="html"><![CDATA[<h2>Overview</h2>

<ul>
<li><a href="https://source.android.com/devices/graphics.html">Graphics</a></li>
<li><a href="https://source.android.com/devices/graphics/architecture.html">Graphics Architecutre</a></li>
</ul>


<p>&ldquo; Android SurfaceFlinger drives the composition of surface area and the rendering to the display screen. UI application must obtain a surface to draw graphics from SurfaceFlinger. &rdquo;</p>

<h3>Android Graphics Components</h3>

<p><img src="https://source.android.com/devices/graphics/images/graphics_surface.png" alt="Android Graphics Components" /></p>

<h3>Graphics Pipeline</h3>

<p><img src="https://source.android.com/devices/graphics/images/graphics_pipeline.png" alt="Graphics Pipeline" /></p>

<h3>BufferQueue</h3>

<p><img src="https://source.android.com/devices/graphics/images/surfaceflinger_bufferqueue.png" alt="SurfaceFlinger+BufferQueue" /></p>

<p><img src="https://source.android.com/devices/graphics/images/bufferqueue.png" alt="BufferQueue Sync" /></p>

<ul>
<li><a href="https://android.googlesource.com/platform/frameworks/native/+/android-l-preview_r2/include/gui/BufferQueue.h">BufferQueue</a></li>
<li><a href="https://android.googlesource.com/platform/frameworks/native/+/android-l-preview_r2/include/gui/IGraphicBufferConsumer.h">IGraphicBufferConsumer</a></li>
<li><a href="https://android.googlesource.com/platform/frameworks/native/+/android-l-preview_r2/include/gui/IGraphicBufferProducer.h">IGraphicBufferProducer</a></li>
</ul>


<p><img src="/images/20141030-bufferqueue.png"></p>

<h2>Understanding Android Internals</h2>

<h3>Graphics Basics <a href="https://charleszblog.wordpress.com/2014/02/20/understanding-android-internals-graphics-basics-i/">I</a> and <a href="https://charleszblog.wordpress.com/2014/02/20/understanding-android-internals-graphics-basicsii/">II</a></h3>

<p><img src="/images/20141029-class-diagram.png"></p>

<h4>Surface</h4>

<p>&ldquo;Surface is a rectangle canvas window on the screen with 2d geometrical metrics and particular color scheme.&rdquo;</p>

<ul>
<li><a href="https://android.googlesource.com/platform/frameworks/native/+/android-l-preview_r2/include/gui/Surface.h">Surface</a></li>
</ul>


<h4>Window</h4>

<p>&ldquo;Window is associated a certain count of graphics buffers which are used to contain drawing artifacts. &rdquo;</p>

<ul>
<li><a href="https://android.googlesource.com/platform/system/core/+/android-l-preview_r2/include/system/window.h">android_native_base_t </a></li>
<li><a href="https://android.googlesource.com/platform/system/core/+/android-l-preview_r2/include/system/window.h">ANativeWindow</a></li>
<li><a href="https://android.googlesource.com/platform/frameworks/native/+/android-l-preview_r2/opengl/include/EGL/eglplatform.h">EGLNativeWindowType</a></li>
</ul>


<h4>Graphic Buffer</h4>

<ul>
<li><a href="https://android.googlesource.com/platform/system/core/+/android-l-preview_r2/include/cutils/native_handle.h">native_handle</a></li>
<li><a href="https://android.googlesource.com/platform/system/core/+/android-l-preview_r2/include/system/window.h">ANativeWindowBuffer</a></li>
<li><a href="https://android.googlesource.com/platform/system/core/+/android-l-preview_r2/include/utils/Flattenable.h">Flattenable</a></li>
<li><a href="https://android.googlesource.com/platform/frameworks/native/+/android-l-preview_r2/include/ui/GraphicBuffer.h">GraphicBuffer</a></li>
<li><a href="https://charleszblog.wordpress.com/2014/02/21/understanding-android-internals-graphic-buffer-handling-interfacres/">Graphic Buffer Handling Interface</a></li>
</ul>


<h3>SurfaceFlinger</h3>

<ul>
<li><a href="https://charleszblog.wordpress.com/2014/02/22/understanding-android-internals-surfaceflinger-i/">I</a></li>
<li><a href="https://charleszblog.wordpress.com/2014/02/22/understanding-android-internals-surfaceflinger-ii/">II</a></li>
<li><a href="https://charleszblog.wordpress.com/2014/02/23/understanding-android-internals-surfaceflinger-iii/">III</a></li>
<li><a href="https://charleszblog.wordpress.com/2014/02/24/understanding-android-graphic-surfaceflinger-iv/">IV</a></li>
<li><a href="https://charleszblog.wordpress.com/2014/02/24/understanding-android-graphics-internals-surfaceflingerv/">V</a></li>
</ul>


<h3><a href="https://charleszblog.wordpress.com/2014/02/20/understanding-android-internals-the-graphics-service-interfaces/">The Graphic Surface Service Interfaces</a></h3>

<h3><a href="https://charleszblog.wordpress.com/2014/02/21/understanding-android-internals-gralloc-and-hwcomposer/"> Gralloc and HwComposer</a></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SELinux for Android]]></title>
    <link href="http://eyan0221.github.io/blog/2014/10/28/selinux-for-android/"/>
    <updated>2014-10-28T12:02:35+08:00</updated>
    <id>http://eyan0221.github.io/blog/2014/10/28/selinux-for-android</id>
    <content type="html"><![CDATA[<h2>Reference</h2>

<ul>
<li><a href="http://selinuxproject.org/page/Main_Page">SELinux Project Wiki</a></li>
<li><a href="http://selinuxproject.org/page/NB_SEforAndroid_1">SE for Android</a></li>
<li><a href="http://seandroid.bitbucket.org/">Security Enhancements for Android</a></li>
<li><a href="http://source.android.com/devices/tech/security/se-linux.html">Validating Security-Enhanced Linux in Android</a></li>
<li><a href="http://www.youtube.com/watch?v=MxjenQ31b70">2012 Red Hat Summit: SELinux For Mere Mortals</a></li>
</ul>


<h2>Projects</h2>

<ul>
<li><a href="https://android.googlesource.com/platform/external/sepolicy/+/master/README">external/sepolicy/README</a></li>
<li>external/libselinux/</li>
<li>external/libsepol/</li>
<li>device/manufacturer/device-name/sepolicy</li>
</ul>


<h2>Control</h2>

<ul>
<li>Permissive mode
<figure class='code'><figcaption><span>BOARD_KERNEL_CMDLINE </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>androidboot.selinux=permissive</span></code></pre></td></tr></table></div></figure></li>
</ul>


<h2><a href="http://securityblog.org/2013/06/28/se-for-android-gs4-howto-and-exploit-demo/">HowTo</a></h2>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>reload policy&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>adb remount &amp;&amp; adb push sepolicy /data/security/
</span><span class='line'>adb shell setprop selinux.reload_policy &lt;0|1>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>toggle enforcing and permissive&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>adb shell setenforce &lt;0|1|permissive|enforcing>
</span><span class='line'>adb shell getenforce</span></code></pre></td></tr></table></div></figure></p>

<h2>Policy</h2>

<p>The policy rules come in the form: allow domains types:classes permissions;, where:</p>

<ul>
<li>Domain - A label for the process or set of processes.</li>
<li>Type - A label for the object (e.g. file, socket) or set of objects.</li>
<li>Class - The kind of object (e.g. file, socket) being accessed.</li>
<li>Permission - The operation (e.g. read, write) being performed.</li>
</ul>


<p>And so an example use of this would follow the structure:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>allow appdomain app_data_file:file rw_file_perms;</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tegra Graphics Debugger]]></title>
    <link href="http://eyan0221.github.io/blog/2014/09/11/tegra-graphics-debugger/"/>
    <updated>2014-09-11T11:13:25+08:00</updated>
    <id>http://eyan0221.github.io/blog/2014/09/11/tegra-graphics-debugger</id>
    <content type="html"><![CDATA[<h2>Overview</h2>

<p><a href="https://developer.nvidia.com/tegra-graphics-debugger">Tegra Graphics Debugger</a> is a free tool from NVIDIA for debugging and profiling OpenGL ES 2.0/3.0/3.1, OpenGL 4.x and <a href="http://www.pcper.com/news/General-Tech/Google-IO-2014-Android-Extension-Pack-Announced">Android Extension Pack</a>. Supported host OS are Windows 7/8, Mac OS X 10.9 and Ubuntu Linux x64 10.10/11.04/12.04. Supported target platform is <a href="http://en.wikipedia.org/wiki/Tegra#Tegra_K1">Tegra K1</a> Android.</p>

<p>As for <a href="https://developer.nvidia.com/nvidia-perfhud-es">PerfHUD ES</a>, it focus on Tegra Android platform before and include <a href="http://en.wikipedia.org/wiki/Tegra#Tegra_4">Tegra 4</a>.</p>

<p>In GTC 2014, there is a talk &ldquo;SG4116: Tegra K1 Developer Tools for Android, Sebastien Domine&rdquo; which gives introudction of Tegra Graphics Debugger. You may watch <a href="http://www.ustream.tv/recorded/51209645">online video</a> starting from 29:05 and download <a href="http://on-demand.gputechconf.com/gtc/2014/presentations/S4825-tegra-k1-dev-tools-for-android.pdf">presentation</a>.</p>

<h2>Getting Started</h2>

<p>Tegra Graphics Debugger is part of Tegra Android Development Pack which is free for <a href="https://developer.nvidia.com/gameworksdownload#?dn=tegra-android-development-pack-3-0r3">download</a>, but requires NVIDIA GameWorks <a href="https://developer.nvidia.com/sign-up-gameworks-registered-developer-program">Registered</a> Developer Program membership. You may check online document <a href="http://docs.nvidia.com/gameworks/index.html#developertools/mobile/tegra_graphics_debugger_main.htm%3FTocPath%3DDeveloper%2520Tools|Mobile%2520Developer%2520Tools|Tegra%2520Graphics%2520Debugger|_____0">here</a> or search below doc after installation.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~/NVPACK/Tegra_Graphics_Debugger/Tegra_Graphics_Debugger.pdf</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li><p>Launch Tegra Graphics Debugger
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/NVPACK/Tegra_Graphics_Debugger<span class="nv">$ </span>./tegra-gfx-debugger
</span></code></pre></td></tr></table></div></figure></p></li>
<li><p><strong>Performance Dashboard</strong> will be the first view after established connection to target device and launch application.</p></li>
<li><strong>Frame Debugger</strong>: Trigger the <strong>Capture Frame</strong> button.</li>
<li><strong>Frame Profiler</strong>: From the <strong>View</strong> menu, select <strong>Profiler</strong>.</li>
<li><strong>Dynamic Shader Editing</strong>: Open the <strong>API Inspector</strong>, navigate to the <strong>Program</strong> page.</li>
</ul>


<h2>Reference</h2>

<p><a href="http://on-demand-gtc.gputechconf.com/gtcnew/on-demand-gtc.php">GPU Technology Conference On-Demand</a> <br/>
<a href="https://developer.nvidia.com/tegra-android-development-pack">Tegra Android Development Pack</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android]]></title>
    <link href="http://eyan0221.github.io/blog/2014/09/09/android-tools/"/>
    <updated>2014-09-09T16:44:09+08:00</updated>
    <id>http://eyan0221.github.io/blog/2014/09/09/android-tools</id>
    <content type="html"><![CDATA[<h2><a href="https://source.android.com/source/build-numbers.html">Codenames</a></h2>

<h2><a href="https://www.google.com/events/io/">Google I/O</a></h2>

<ul>
<li><a href="https://developers.google.com/events/io/2013/sessions">2013</a></li>
<li><a href="https://developers.google.com/events/io/2012/">2012</a></li>
</ul>


<h2>Debug</h2>

<ul>
<li><a href="http://developer.android.com/tools/help/systrace.html">Systrace</a></li>
<li><a href="http://developer.android.com/tools/help/uiautomator/index.html">uiautomator</a></li>
<li><a href="http://sujaiantony.wordpress.com/">Memory leak debugging with libc</a></li>
<li><a href="http://elinux.org/Android_Memory_Usage">Android Memory Usage</a></li>
<li><a href="http://elinux.org/Android_logger">Logger</a></li>
<li><p><a href="http://stackoverflow.com/questions/1069066/how-can-i-get-the-current-stack-trace">CallStack in Java</a>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.lang.Thread</span>
</span><span class='line'><span class="n">Thread</span><span class="o">.</span><span class="na">dumpStack</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></p></li>
<li><p><a href="http://stackoverflow.com/questions/11470190/how-to-use-callstack-in-callstack-tpp-in-a-executable-on-android-platform">CallStack in C/C++</a>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">utils</span><span class="o">/</span><span class="n">CallStack</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">CallStack</span> <span class="n">stack</span><span class="p">;</span>
</span><span class='line'><span class="n">stack</span><span class="p">.</span><span class="n">dump</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;[</span><span class="n">log</span> <span class="n">prefix</span><span class="p">]</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span></code></pre></td></tr></table></div></figure></p></li>
<li><p>KeyEvent</p></li>
</ul>


<p>Find keycode in <a href="https://android.googlesource.com/platform/frameworks/base.git/+/076357b8567458d4b6dfdcf839ef751634cd2bfb/core/java/android/view/KeyEvent.java#27">frameworks/base/core/java/android/view/KeyEvent.java</a>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$adb</span> shell input keyevent <span class="o">[</span>key code<span class="o">]</span>
</span><span class='line'><span class="nv">$adb</span> shell input keyevent <span class="m">27</span>    <span class="c"># camera</span>
</span><span class='line'><span class="nv">$adb</span> shell input keyevent <span class="m">82</span>    <span class="c"># unlock screen</span>
</span><span class='line'><span class="nv">$adb</span> shell input text <span class="p">&amp;</span>ldquo<span class="p">;</span>ANDROID<span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="c"># input string</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Optimization</h2>

<ul>
<li><p><a href="http://www.slideshare.net/kanru/android-boot-time-optimization">Boot time</a></p></li>
<li><p><a href="http://elinux.org/Using_Bootchart_on_Android">bootchart</a></p></li>
</ul>


<p>Step1: Installing the bootchart tool</p>

<p>Download <a href="http://www.bootchart.org/download.html">bootchart</a></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$tar</span> xjf bootchart-0.9.tar.bz2
</span><span class='line'><span class="nv">$cd</span> bootchart-0.9
</span><span class='line'><span class="nv">$sudo</span> ./install.sh
</span></code></pre></td></tr></table></div></figure></p>

<p>Step2: Compile init with bootchart enabled and flash images</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$touch</span> <span class="o">[</span>mydroid<span class="o">]</span>/system/core/init/init.c
</span><span class='line'><span class="nv">$export</span> <span class="nv">INIT_BOOTCHART</span><span class="o">=</span><span class="nb">true</span>
</span><span class='line'><span class="nv">$m</span> init ramdisk bootimage
</span></code></pre></td></tr></table></div></figure></p>

<p>Step3: Trigger bootchart</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$adb</span> shell <span class="p">&amp;</span>lsquo<span class="p">;</span><span class="nb">echo </span><span class="m">20</span> &gt; /data/bootchart-start<span class="p">&amp;</span>rsquo<span class="p">;</span>
</span><span class='line'><span class="nv">$adb</span> shell mkdir /data/bootchart
</span></code></pre></td></tr></table></div></figure></p>

<p>Step4: Get bootchart.tgz</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$/</span>system/core/init/grab-bootchart.sh
</span></code></pre></td></tr></table></div></figure></p>

<p>Step5: Generate bootchart image</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$java</span> -jar <span class="o">[</span>path to bootchart<span class="o">]</span>/bootchart-0.9/bootchart.jar bootchart.tgz
</span></code></pre></td></tr></table></div></figure></p>

<h2>Display</h2>

<ul>
<li><p><a href="https://www.sven.de/dpi/">DPI Calculator</a></p></li>
<li><p>Display Timeout</p></li>
</ul>


<p><figure class='code'><figcaption><span>set display timeout and stay awake </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$adb</span> shell&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;sqlite3 /data/data/com.android.providers.settings/databases/settings.db&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;.databases&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;.tables&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;.dump&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;select * from &lt;table&gt;<span class="p">;</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;delete from &lt;table&gt; where &lt;condition&gt;<span class="p">;</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;update system <span class="nb">set </span><span class="nv">value</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span>1800000<span class="p">&amp;</span>rdquo<span class="p">;</span> where <span class="nv">name</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span>screen_off_timeout<span class="p">&amp;</span>rdquo<span class="p">;;</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;update system <span class="nb">set </span><span class="nv">value</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span>3<span class="p">&amp;</span>rdquo<span class="p">;</span> where <span class="nv">name</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span>stay_on_while_plugged_in<span class="p">&amp;</span>rdquo<span class="p">;;</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;.exit&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></p>

<h2>Code Snippet</h2>

<ul>
<li>Property Permission</li>
</ul>


<p><a href="https://android.googlesource.com/platform/system/core/+/fb1c9cf6fa4efafb3e0c6b0bc93c7f087d926a48/init/property_service.c#58">system/core/init/property_service.c</a></p>

<ul>
<li>Device ID
<figure class='code'><figcaption><span>Device ID </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$adb</span> shell cat /sys/class/android_usb/android0/iSerial
</span><span class='line'><span class="nv">$adb</span> shell getprop ro.serialno
</span></code></pre></td></tr></table></div></figure></li>
</ul>


<p><figure class='code'><figcaption><span>out/target/product/[target name]/recovery/root/init.rc </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">write</span> <span class="o">/</span><span class="n">sys</span><span class="o">/</span><span class="n">class</span><span class="o">/</span><span class="n">android_usb</span><span class="o">/</span><span class="n">android0</span><span class="o">/</span><span class="n">iSerial</span> <span class="err">$</span><span class="p">{</span><span class="n">ro</span><span class="p">.</span><span class="n">serialno</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>system/core/init/init.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">property_set</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">ro</span><span class="p">.</span><span class="n">serialno</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Others</h2>

<p><figure class='code'><figcaption><span>Open Browser with url </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$adb</span> shell am start <span class="o">[</span>url<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>Start Java App </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$adb</span> shell am start -n <span class="o">[</span>com.package.name<span class="o">]</span>/<span class="o">[</span>com.package.name.ActivityName<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>Playback Video </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$adb</span> shell am start -a android.intent.action.VIEW -d ////<span class="o">[</span>path to video<span class="o">]</span>/<span class="o">[</span>video file name<span class="o">]</span> -t video/* -n com.android.gallery3d/.app.MovieActivity
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SurfaceFlinger]]></title>
    <link href="http://eyan0221.github.io/blog/2014/09/09/surfaceflinger/"/>
    <updated>2014-09-09T15:54:50+08:00</updated>
    <id>http://eyan0221.github.io/blog/2014/09/09/surfaceflinger</id>
    <content type="html"><![CDATA[<h2>Dump of SERVICE SurfaceFlinger</h2>

<p>Find more information about <a href="https://source.android.com/devices/tech/input/dumpsys.html">dumpsys</a></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adb shell dumpsys SurfaceFlinger
</span></code></pre></td></tr></table></div></figure></p>

<h2>Frame Latency</h2>

<p><figure class='code'><figcaption><span>Prints information about last 128 frames displayed in specific window </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adb shell dumpsys SurfaceFlinger <span class="p">&amp;</span>ndash<span class="p">;</span>latency <span class="o">[</span>window name<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>According to <a href="https://android.googlesource.com/platform/external/chromium_org/+/d0247b1/build/android/pylib/perf/surface_stats_collector.py#215">output definitive</a>,
The data returned looks like this:
<code>
16954612
7657467895508 7657482691352 7657493499756
7657484466553 7657499645964 7657511077881
7657500793457 7657516600576 7657527404785
(...)
</code></p>

<p>The first line is the refresh period (here 16.95 ms), it is followed
by 128 lines w/ 3 timestamps in nanosecond each:</p>

<p>A) when the app started to draw <br/>
B) the vsync immediately preceding SF submitting the frame to the h/w <br/>
C) timestamp immediately after SF submitted that frame to the h/w <br/></p>

<p>The difference between the 1st and 3rd timestamp is the frame-latency.</p>

<h2>Observe composite rate in logcat</h2>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adb shell service call SurfaceFlinger <span class="m">1001</span> i32 1
</span></code></pre></td></tr></table></div></figure></p>

<h2>Force using SurfaceFlinger as compositor</h2>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adb shell service call SurfaceFlinger <span class="m">1008</span> i32 1
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
</feed>
