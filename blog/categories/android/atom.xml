<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | nyan~]]></title>
  <link href="http://eyan0221.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://eyan0221.github.io/"/>
  <updated>2014-09-09T17:13:32+08:00</updated>
  <id>http://eyan0221.github.io/</id>
  <author>
    <name><![CDATA[Emma Yan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android Tools]]></title>
    <link href="http://eyan0221.github.io/blog/2014/09/09/android-tools/"/>
    <updated>2014-09-09T16:44:09+08:00</updated>
    <id>http://eyan0221.github.io/blog/2014/09/09/android-tools</id>
    <content type="html"><![CDATA[<p><a href="http://elinux.org/Using_Bootchart_on_Android">bootchart</a></p>

<p><strong> Step1: Installing the bootchart tool </strong></p>

<p>Download <a href="http://www.bootchart.org/download.html">bootchart</a></p>

<pre><code>tar xjf bootchart-0.9.tar.bz2
cd bootchart-0.9
sudo ./install.sh
</code></pre>

<p><strong> Step2: Compile init with bootchart enabled and flash images </strong>
<code>
touch [mydroid]/system/core/init/init.c
export INIT_BOOTCHART=true
m init ramdisk bootimage
</code></p>

<p><strong> Step3: Trigger bootchart </strong></p>

<pre><code>adb shell 'echo 20 &gt; /data/bootchart-start'
adb shell mkdir /data/bootchart
</code></pre>

<p><strong> Step4: Get bootchart.tgz </strong></p>

<pre><code>/system/core/init/grab-bootchart.sh
</code></pre>

<p><strong> Step5: Generate bootchart image </strong></p>

<pre><code>java -jar [path to bootchart]/bootchart-0.9/bootchart.jar bootchart.tgz
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SurfaceFlinger]]></title>
    <link href="http://eyan0221.github.io/blog/2014/09/09/surfaceflinger/"/>
    <updated>2014-09-09T15:54:50+08:00</updated>
    <id>http://eyan0221.github.io/blog/2014/09/09/surfaceflinger</id>
    <content type="html"><![CDATA[<p><strong> Prints of SERVICE SurfaceFlinger </strong></p>

<pre><code>adb shell dumpsys SurfaceFlinger
</code></pre>

<p>Find more information about <a href="https://source.android.com/devices/tech/input/dumpsys.html">dumpsys</a></p>

<p><strong> Prints information about last 128 frames displayed in specific window </strong></p>

<pre><code>dumpsys SurfaceFlinger --latency [window name]
</code></pre>

<p>You can see how chromium.org utilize this tool to get window information. Please check <a href="https://android.googlesource.com/platform/external/chromium_org/+/d0247b1/build/android/pylib/perf/surface_stats_collector.py#215">external/chromium_org/build/android/pylib/surface_stats_collector.py</a></p>

<p><strong> Observe composite rate in logcat </strong></p>

<pre><code>adb shell service call SurfaceFlinger 1001 i32 1
</code></pre>

<p><strong> Force using SurfaceFlinger as compositor </strong></p>

<pre><code>adb shell service call SurfaceFlinger 1008 i32 1
</code></pre>
]]></content>
  </entry>
  
</feed>
