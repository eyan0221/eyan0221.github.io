<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | nyan~]]></title>
  <link href="http://eyan0221.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://eyan0221.github.io/"/>
  <updated>2014-09-10T00:44:33+08:00</updated>
  <id>http://eyan0221.github.io/</id>
  <author>
    <name><![CDATA[Emma Yan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android]]></title>
    <link href="http://eyan0221.github.io/blog/2014/09/09/android-tools/"/>
    <updated>2014-09-09T16:44:09+08:00</updated>
    <id>http://eyan0221.github.io/blog/2014/09/09/android-tools</id>
    <content type="html"><![CDATA[<ul>
<li><a href="#codenames">Codenames</a></li>
<li><a href="#google-io">Google I/O</a></li>
<li><a href="#debug">Debug</a></li>
<li><a href="#ui">UI</a></li>
<li><a href="#display">Display</a></li>
<li><a href="#optimization">Optimization</a></li>
<li><a href="#others">Others</a></li>
</ul>


<h1>Codenames</h1>

<p><a href="https://source.android.com/source/build-numbers.html">https://source.android.com/source/build-numbers.html</a></p>

<h2>Google I/O</h2>

<p><a href="https://www.google.com/events/io/">2014</a>
<a href="https://developers.google.com/events/io/2013/sessions">2013</a>
<a href="https://developers.google.com/events/io/2012/">2012</a></p>

<h2>Debug</h2>

<h3><a href="http://developer.android.com/tools/help/systrace.html">Systrace</a></h3>

<h3><a href="http://stackoverflow.com/questions/11470190/how-to-use-callstack-in-callstack-tpp-in-a-executable-on-android-platform">CallStack in C/C++</a></h3>

<pre><code>#include &lt;utils/CallStack.h&gt;
CallStack stack;
stack.dump("[log prefix]");
</code></pre>

<h3><a href="http://stackoverflow.com/questions/1069066/how-can-i-get-the-current-stack-trace">CallStack in Java</a></h3>

<h3><a href="http://elinux.org/Android_logger">Logger</a></h3>

<h3>Memory</h3>

<h4><a href="http://sujaiantony.wordpress.com/">Memory leak debugging with libc</a></h4>

<h4><a href="http://elinux.org/Android_Memory_Usage">Memory usage</a></h4>

<h2>UI</h2>

<h3>uiautomator</h3>

<p><a href="http://developer.android.com/tools/help/uiautomator/index.html">http://developer.android.com/tools/help/uiautomator/index.html</a></p>

<h3>KeyEvent</h3>

<p>Find keycode in <a href="https://android.googlesource.com/platform/frameworks/base.git/+/076357b8567458d4b6dfdcf839ef751634cd2bfb/core/java/android/view/KeyEvent.java#27">frameworks/base/core/java/android/view/KeyEvent.java</a></p>

<pre><code>adb shell input keyevent [key code]
</code></pre>

<h2>Optimization</h2>

<h3><a href="http://www.slideshare.net/kanru/android-boot-time-optimization">Boot time</a></h3>

<h3><a href="http://elinux.org/Using_Bootchart_on_Android">bootchart</a></h3>

<h4>Step1: Installing the bootchart tool</h4>

<p>Download <a href="http://www.bootchart.org/download.html">bootchart</a></p>

<pre><code>tar xjf bootchart-0.9.tar.bz2
cd bootchart-0.9
sudo ./install.sh
</code></pre>

<h4>Step2: Compile init with bootchart enabled and flash images</h4>

<pre><code>touch [mydroid]/system/core/init/init.c
export INIT_BOOTCHART=true
m init ramdisk bootimage
</code></pre>

<h4>Step3: Trigger bootchart</h4>

<pre><code>adb shell 'echo 20 &gt; /data/bootchart-start'
adb shell mkdir /data/bootchart
</code></pre>

<h4>Step4: Get bootchart.tgz</h4>

<pre><code>/system/core/init/grab-bootchart.sh
</code></pre>

<h4>Step5: Generate bootchart image</h4>

<pre><code>java -jar [path to bootchart]/bootchart-0.9/bootchart.jar bootchart.tgz
</code></pre>

<h2>Display</h2>

<h3>DPI Calculator</h3>

<p><a href="https://www.sven.de/dpi/">https://www.sven.de/dpi/</a></p>

<h3>Update Display Timeout and stay awake</h3>

<pre><code>$adb shell
#sqlite3 /data/data/com.android.providers.settings/databases/settings.db
#update system set value="1800000" where name="screen_off_timeout";
#update system set value="3" where name="stay_on_while_plugged_in";
#.exit
</code></pre>

<h2>Other Tips</h2>

<p><strong> Open Browser with url </strong></p>

<pre><code>adb shell am start [url]
</code></pre>

<p><strong> Start Java App </strong></p>

<pre><code>adb shell am start -n [com.package.name]/[com.package.name.ActivityName]
</code></pre>

<p><strong> Playback Video </strong></p>

<pre><code>adb shell am start -a android.intent.action.VIEW -d ////[path to video]/[video file name] -t video/* -n com.android.gallery3d/.app.MovieActivity
</code></pre>

<p><strong> Device ID </strong></p>

<pre><code>adb shell cat /sys/class/android_usb/android0/iSerial
 adb shell getprop ro.serialno
</code></pre>

<pre><code>out/target/product/[target name]/recovery/root/init.rc
write /sys/class/android_usb/android0/iSerial ${ro.serialno}
system/core/init/init.c
property_set("ro.serialno")
</code></pre>

<p><strong> Property Permission </strong></p>

<p><a href="https://android.googlesource.com/platform/system/core/+/fb1c9cf6fa4efafb3e0c6b0bc93c7f087d926a48/init/property_service.c#58">system/core/init/property_service.c</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SurfaceFlinger]]></title>
    <link href="http://eyan0221.github.io/blog/2014/09/09/surfaceflinger/"/>
    <updated>2014-09-09T15:54:50+08:00</updated>
    <id>http://eyan0221.github.io/blog/2014/09/09/surfaceflinger</id>
    <content type="html"><![CDATA[<p><strong> Prints of SERVICE SurfaceFlinger </strong></p>

<pre><code>adb shell dumpsys SurfaceFlinger
</code></pre>

<p>Find more information about <a href="https://source.android.com/devices/tech/input/dumpsys.html">dumpsys</a></p>

<p><strong> Prints information about last 128 frames displayed in specific window </strong></p>

<pre><code>dumpsys SurfaceFlinger --latency [window name]
</code></pre>

<p>You can see how chromium.org utilize this tool to get window information. Please check <a href="https://android.googlesource.com/platform/external/chromium_org/+/d0247b1/build/android/pylib/perf/surface_stats_collector.py#215">external/chromium_org/build/android/pylib/surface_stats_collector.py</a></p>

<p><strong> Observe composite rate in logcat </strong></p>

<pre><code>adb shell service call SurfaceFlinger 1001 i32 1
</code></pre>

<p><strong> Force using SurfaceFlinger as compositor </strong></p>

<pre><code>adb shell service call SurfaceFlinger 1008 i32 1
</code></pre>
]]></content>
  </entry>
  
</feed>
