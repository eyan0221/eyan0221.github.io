<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Surfaceflinger | nyan~]]></title>
  <link href="http://eyan0221.github.io/blog/categories/surfaceflinger/atom.xml" rel="self"/>
  <link href="http://eyan0221.github.io/"/>
  <updated>2014-10-30T15:03:12+08:00</updated>
  <id>http://eyan0221.github.io/</id>
  <author>
    <name><![CDATA[Emma Yan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android Window System]]></title>
    <link href="http://eyan0221.github.io/blog/2014/10/29/android-window-system/"/>
    <updated>2014-10-29T14:55:34+08:00</updated>
    <id>http://eyan0221.github.io/blog/2014/10/29/android-window-system</id>
    <content type="html"><![CDATA[<h2>Overview</h2>

<ul>
<li><a href="https://source.android.com/devices/graphics.html">Graphics</a></li>
<li><a href="https://source.android.com/devices/graphics/architecture.html">Graphics Architecutre</a></li>
</ul>


<p>&ldquo; Android SurfaceFlinger drives the composition of surface area and the rendering to the display screen. UI application must obtain a surface to draw graphics from SurfaceFlinger. &rdquo;</p>

<h3>Android Graphics Components</h3>

<p><img src="https://source.android.com/devices/graphics/images/graphics_surface.png" alt="Android Graphics Components" /></p>

<h3>Graphics Pipeline</h3>

<p><img src="https://source.android.com/devices/graphics/images/graphics_pipeline.png" alt="Graphics Pipeline" /></p>

<h3>BufferQueue</h3>

<p><img src="https://source.android.com/devices/graphics/images/surfaceflinger_bufferqueue.png" alt="SurfaceFlinger+BufferQueue" /></p>

<p><img src="https://source.android.com/devices/graphics/images/bufferqueue.png" alt="BufferQueue Sync" /></p>

<ul>
<li><a href="https://android.googlesource.com/platform/frameworks/native/+/android-l-preview_r2/include/gui/BufferQueue.h">BufferQueue</a></li>
<li><a href="https://android.googlesource.com/platform/frameworks/native/+/android-l-preview_r2/include/gui/IGraphicBufferConsumer.h">IGraphicBufferConsumer</a></li>
<li><a href="https://android.googlesource.com/platform/frameworks/native/+/android-l-preview_r2/include/gui/IGraphicBufferProducer.h">IGraphicBufferProducer</a></li>
</ul>


<p><img src="/images/20141030-bufferqueue.png"></p>

<h2>Understanding Android Internals - Graphics Basics <a href="https://charleszblog.wordpress.com/2014/02/20/understanding-android-internals-graphics-basics-i/">I</a> and <a href="https://charleszblog.wordpress.com/2014/02/20/understanding-android-internals-graphics-basicsii/">II</a></h2>

<p><img src="/images/20141029-class-diagram.png"></p>

<h3>Surface</h3>

<p>&ldquo;Surface is a rectangle canvas window on the screen with 2d geometrical metrics and particular color scheme.&rdquo;</p>

<ul>
<li><a href="https://android.googlesource.com/platform/frameworks/native/+/android-l-preview_r2/include/gui/Surface.h">Surface</a></li>
</ul>


<h3>Window</h3>

<p>&ldquo;Window is associated a certain count of graphics buffers which are used to contain drawing artifacts. &rdquo;</p>

<ul>
<li><a href="https://android.googlesource.com/platform/system/core/+/android-l-preview_r2/include/system/window.h">android_native_base_t </a></li>
<li><a href="https://android.googlesource.com/platform/system/core/+/android-l-preview_r2/include/system/window.h">ANativeWindow</a></li>
<li><a href="https://android.googlesource.com/platform/frameworks/native/+/android-l-preview_r2/opengl/include/EGL/eglplatform.h">EGLNativeWindowType</a></li>
</ul>


<h3>Graphic Buffer</h3>

<ul>
<li><a href="https://android.googlesource.com/platform/system/core/+/android-l-preview_r2/include/cutils/native_handle.h">native_handle</a></li>
<li><a href="https://android.googlesource.com/platform/system/core/+/android-l-preview_r2/include/system/window.h">ANativeWindowBuffer</a></li>
<li><a href="https://android.googlesource.com/platform/system/core/+/android-l-preview_r2/include/utils/Flattenable.h">Flattenable</a></li>
<li><a href="https://android.googlesource.com/platform/frameworks/native/+/android-l-preview_r2/include/ui/GraphicBuffer.h">GraphicBuffer</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SurfaceFlinger]]></title>
    <link href="http://eyan0221.github.io/blog/2014/09/09/surfaceflinger/"/>
    <updated>2014-09-09T15:54:50+08:00</updated>
    <id>http://eyan0221.github.io/blog/2014/09/09/surfaceflinger</id>
    <content type="html"><![CDATA[<h2>Dump of SERVICE SurfaceFlinger</h2>

<p>Find more information about <a href="https://source.android.com/devices/tech/input/dumpsys.html">dumpsys</a></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adb shell dumpsys SurfaceFlinger
</span></code></pre></td></tr></table></div></figure></p>

<h2>Frame Latency</h2>

<p><figure class='code'><figcaption><span>Prints information about last 128 frames displayed in specific window </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adb shell dumpsys SurfaceFlinger <span class="p">&amp;</span>ndash<span class="p">;</span>latency <span class="o">[</span>window name<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>According to <a href="https://android.googlesource.com/platform/external/chromium_org/+/d0247b1/build/android/pylib/perf/surface_stats_collector.py#215">output definitive</a>,
The data returned looks like this:
<code>
16954612
7657467895508 7657482691352 7657493499756
7657484466553 7657499645964 7657511077881
7657500793457 7657516600576 7657527404785
(...)
</code></p>

<p>The first line is the refresh period (here 16.95 ms), it is followed
by 128 lines w/ 3 timestamps in nanosecond each:</p>

<p>A) when the app started to draw <br/>
B) the vsync immediately preceding SF submitting the frame to the h/w <br/>
C) timestamp immediately after SF submitted that frame to the h/w <br/></p>

<p>The difference between the 1st and 3rd timestamp is the frame-latency.</p>

<h2>Observe composite rate in logcat</h2>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adb shell service call SurfaceFlinger <span class="m">1001</span> i32 1
</span></code></pre></td></tr></table></div></figure></p>

<h2>Force using SurfaceFlinger as compositor</h2>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adb shell service call SurfaceFlinger <span class="m">1008</span> i32 1
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
</feed>
