<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[nyan~]]></title>
  <link href="http://eyan0221.github.io/atom.xml" rel="self"/>
  <link href="http://eyan0221.github.io/"/>
  <updated>2014-10-30T09:22:13+08:00</updated>
  <id>http://eyan0221.github.io/</id>
  <author>
    <name><![CDATA[Emma Yan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android Window System]]></title>
    <link href="http://eyan0221.github.io/blog/2014/10/29/android-window-system/"/>
    <updated>2014-10-29T14:55:34+08:00</updated>
    <id>http://eyan0221.github.io/blog/2014/10/29/android-window-system</id>
    <content type="html"><![CDATA[<h2>Reference</h2>

<ul>
<li><a href="https://charleszblog.wordpress.com/2014/02/20/understanding-android-internals-graphics-basics-i/">Understanding Android Internals - Graphics Basics I</a></li>
<li><a href="https://charleszblog.wordpress.com/2014/02/20/understanding-android-internals-graphics-basicsii/">Understanding Android Internals - Graphics Basics II</a></li>
</ul>


<h2>Class Diagram</h2>

<p><img src="images/20141029-class-diagram.png"></p>

<h2>Abstract Window Prototype</h2>

<h3><a href="https://android.googlesource.com/platform/system/core/+/android-l-preview_r2/include/system/window.h">android_native_base_t </a></h3>

<figure class='code'><figcaption><span>system/core/include/system/window.h </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="kt">android_native_base_t</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="cm">/* a magic value defined by the actual EGL native type */</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">magic</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* the sizeof() of the actual EGL native type */</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">version</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span><span class="o">*</span> <span class="n">reserved</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* reference-counting interface */</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">incRef</span><span class="p">)(</span><span class="k">struct</span> <span class="kt">android_native_base_t</span><span class="o">*</span> <span class="n">base</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">decRef</span><span class="p">)(</span><span class="k">struct</span> <span class="kt">android_native_base_t</span><span class="o">*</span> <span class="n">base</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="kt">android_native_base_t</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="https://android.googlesource.com/platform/system/core/+/android-l-preview_r2/include/system/window.h">ANativeWindow</a></h3>

<figure class='code'><figcaption><span>system/core/include/system/window.h </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">ANativeWindow</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="cp">#ifdef __cplusplus</span>
</span><span class='line'>    <span class="n">ANativeWindow</span><span class="p">()</span>
</span><span class='line'>        <span class="o">:</span> <span class="n">flags</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">minSwapInterval</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">maxSwapInterval</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">xdpi</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">ydpi</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">common</span><span class="p">.</span><span class="n">magic</span> <span class="o">=</span> <span class="n">ANDROID_NATIVE_WINDOW_MAGIC</span><span class="p">;</span>
</span><span class='line'>        <span class="n">common</span><span class="p">.</span><span class="n">version</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">ANativeWindow</span><span class="p">);</span>
</span><span class='line'>        <span class="n">memset</span><span class="p">(</span><span class="n">common</span><span class="p">.</span><span class="n">reserved</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">common</span><span class="p">.</span><span class="n">reserved</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Implement the methods that sp&lt;ANativeWindow&gt; expects so that it</span>
</span><span class='line'><span class="cm">       can be used to automatically refcount ANativeWindow&#39;s. */</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">incStrong</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span><span class="o">*</span> <span class="cm">/*id*/</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">common</span><span class="p">.</span><span class="n">incRef</span><span class="p">(</span><span class="n">const_cast</span><span class="o">&lt;</span><span class="kt">android_native_base_t</span><span class="o">*&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">common</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">decStrong</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span><span class="o">*</span> <span class="cm">/*id*/</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">common</span><span class="p">.</span><span class="n">decRef</span><span class="p">(</span><span class="n">const_cast</span><span class="o">&lt;</span><span class="kt">android_native_base_t</span><span class="o">*&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">common</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">struct</span> <span class="kt">android_native_base_t</span> <span class="n">common</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* flags describing some attributes of this surface or its updater */</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">uint32_t</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* min swap interval supported by this updated */</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">int</span>   <span class="n">minSwapInterval</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* max swap interval supported by this updated */</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">int</span>   <span class="n">maxSwapInterval</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* horizontal and vertical resolution in DPI */</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">float</span> <span class="n">xdpi</span><span class="p">;</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">float</span> <span class="n">ydpi</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Some storage reserved for the OEM&#39;s driver. */</span>
</span><span class='line'>    <span class="kt">intptr_t</span>    <span class="n">oem</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * Set the swap interval for this surface.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * Returns 0 on success or -errno on error.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">int</span>     <span class="p">(</span><span class="o">*</span><span class="n">setSwapInterval</span><span class="p">)(</span><span class="k">struct</span> <span class="n">ANativeWindow</span><span class="o">*</span> <span class="n">window</span><span class="p">,</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">interval</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * hook used to retrieve information about the native window.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * Returns 0 on success or -errno on error.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">int</span>     <span class="p">(</span><span class="o">*</span><span class="n">query</span><span class="p">)(</span><span class="k">const</span> <span class="k">struct</span> <span class="n">ANativeWindow</span><span class="o">*</span> <span class="n">window</span><span class="p">,</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">what</span><span class="p">,</span> <span class="kt">int</span><span class="o">*</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * hook used to perform various operations on the surface.</span>
</span><span class='line'><span class="cm">     * (*perform)() is a generic mechanism to add functionality to</span>
</span><span class='line'><span class="cm">     * ANativeWindow while keeping backward binary compatibility.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * DO NOT CALL THIS HOOK DIRECTLY.  Instead, use the helper functions</span>
</span><span class='line'><span class="cm">     * defined below.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     *  (*perform)() returns -ENOENT if the &#39;what&#39; parameter is not supported</span>
</span><span class='line'><span class="cm">     *  by the surface&#39;s implementation.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * The valid operations are:</span>
</span><span class='line'><span class="cm">     *     NATIVE_WINDOW_SET_USAGE</span>
</span><span class='line'><span class="cm">     *     NATIVE_WINDOW_CONNECT               (deprecated)</span>
</span><span class='line'><span class="cm">     *     NATIVE_WINDOW_DISCONNECT            (deprecated)</span>
</span><span class='line'><span class="cm">     *     NATIVE_WINDOW_SET_CROP              (private)</span>
</span><span class='line'><span class="cm">     *     NATIVE_WINDOW_SET_BUFFER_COUNT</span>
</span><span class='line'><span class="cm">     *     NATIVE_WINDOW_SET_BUFFERS_GEOMETRY  (deprecated)</span>
</span><span class='line'><span class="cm">     *     NATIVE_WINDOW_SET_BUFFERS_TRANSFORM</span>
</span><span class='line'><span class="cm">     *     NATIVE_WINDOW_SET_BUFFERS_TIMESTAMP</span>
</span><span class='line'><span class="cm">     *     NATIVE_WINDOW_SET_BUFFERS_DIMENSIONS</span>
</span><span class='line'><span class="cm">     *     NATIVE_WINDOW_SET_BUFFERS_FORMAT</span>
</span><span class='line'><span class="cm">     *     NATIVE_WINDOW_SET_SCALING_MODE       (private)</span>
</span><span class='line'><span class="cm">     *     NATIVE_WINDOW_LOCK                   (private)</span>
</span><span class='line'><span class="cm">     *     NATIVE_WINDOW_UNLOCK_AND_POST        (private)</span>
</span><span class='line'><span class="cm">     *     NATIVE_WINDOW_API_CONNECT            (private)</span>
</span><span class='line'><span class="cm">     *     NATIVE_WINDOW_API_DISCONNECT         (private)</span>
</span><span class='line'><span class="cm">     *     NATIVE_WINDOW_SET_BUFFERS_USER_DIMENSIONS (private)</span>
</span><span class='line'><span class="cm">     *     NATIVE_WINDOW_SET_POST_TRANSFORM_CROP (private)</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span>     <span class="p">(</span><span class="o">*</span><span class="n">perform</span><span class="p">)(</span><span class="k">struct</span> <span class="n">ANativeWindow</span><span class="o">*</span> <span class="n">window</span><span class="p">,</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">operation</span><span class="p">,</span> <span class="p">...</span> <span class="p">);</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * Hook called by EGL to acquire a buffer. This call may block if no</span>
</span><span class='line'><span class="cm">     * buffers are available.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * The window holds a reference to the buffer between dequeueBuffer and</span>
</span><span class='line'><span class="cm">     * either queueBuffer or cancelBuffer, so clients only need their own</span>
</span><span class='line'><span class="cm">     * reference if they might use the buffer after queueing or canceling it.</span>
</span><span class='line'><span class="cm">     * Holding a reference to a buffer after queueing or canceling it is only</span>
</span><span class='line'><span class="cm">     * allowed if a specific buffer count has been set.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * The libsync fence file descriptor returned in the int pointed to by the</span>
</span><span class='line'><span class="cm">     * fenceFd argument will refer to the fence that must signal before the</span>
</span><span class='line'><span class="cm">     * dequeued buffer may be written to.  A value of -1 indicates that the</span>
</span><span class='line'><span class="cm">     * caller may access the buffer immediately without waiting on a fence.  If</span>
</span><span class='line'><span class="cm">     * a valid file descriptor is returned (i.e. any value except -1) then the</span>
</span><span class='line'><span class="cm">     * caller is responsible for closing the file descriptor.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * Returns 0 on success or -errno on error.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">int</span>     <span class="p">(</span><span class="o">*</span><span class="n">dequeueBuffer</span><span class="p">)(</span><span class="k">struct</span> <span class="n">ANativeWindow</span><span class="o">*</span> <span class="n">window</span><span class="p">,</span>
</span><span class='line'>                <span class="k">struct</span> <span class="n">ANativeWindowBuffer</span><span class="o">**</span> <span class="n">buffer</span><span class="p">,</span> <span class="kt">int</span><span class="o">*</span> <span class="n">fenceFd</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * Hook called by EGL when modifications to the render buffer are done.</span>
</span><span class='line'><span class="cm">     * This unlocks and post the buffer.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * The window holds a reference to the buffer between dequeueBuffer and</span>
</span><span class='line'><span class="cm">     * either queueBuffer or cancelBuffer, so clients only need their own</span>
</span><span class='line'><span class="cm">     * reference if they might use the buffer after queueing or canceling it.</span>
</span><span class='line'><span class="cm">     * Holding a reference to a buffer after queueing or canceling it is only</span>
</span><span class='line'><span class="cm">     * allowed if a specific buffer count has been set.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * The fenceFd argument specifies a libsync fence file descriptor for a</span>
</span><span class='line'><span class="cm">     * fence that must signal before the buffer can be accessed.  If the buffer</span>
</span><span class='line'><span class="cm">     * can be accessed immediately then a value of -1 should be used.  The</span>
</span><span class='line'><span class="cm">     * caller must not use the file descriptor after it is passed to</span>
</span><span class='line'><span class="cm">     * queueBuffer, and the ANativeWindow implementation is responsible for</span>
</span><span class='line'><span class="cm">     * closing it.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * Returns 0 on success or -errno on error.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">int</span>     <span class="p">(</span><span class="o">*</span><span class="n">queueBuffer</span><span class="p">)(</span><span class="k">struct</span> <span class="n">ANativeWindow</span><span class="o">*</span> <span class="n">window</span><span class="p">,</span>
</span><span class='line'>                <span class="k">struct</span> <span class="n">ANativeWindowBuffer</span><span class="o">*</span> <span class="n">buffer</span><span class="p">,</span> <span class="kt">int</span> <span class="n">fenceFd</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * Hook used to cancel a buffer that has been dequeued.</span>
</span><span class='line'><span class="cm">     * No synchronization is performed between dequeue() and cancel(), so</span>
</span><span class='line'><span class="cm">     * either external synchronization is needed, or these functions must be</span>
</span><span class='line'><span class="cm">     * called from the same thread.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * The window holds a reference to the buffer between dequeueBuffer and</span>
</span><span class='line'><span class="cm">     * either queueBuffer or cancelBuffer, so clients only need their own</span>
</span><span class='line'><span class="cm">     * reference if they might use the buffer after queueing or canceling it.</span>
</span><span class='line'><span class="cm">     * Holding a reference to a buffer after queueing or canceling it is only</span>
</span><span class='line'><span class="cm">     * allowed if a specific buffer count has been set.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * The fenceFd argument specifies a libsync fence file decsriptor for a</span>
</span><span class='line'><span class="cm">     * fence that must signal before the buffer can be accessed.  If the buffer</span>
</span><span class='line'><span class="cm">     * can be accessed immediately then a value of -1 should be used.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * Note that if the client has not waited on the fence that was returned</span>
</span><span class='line'><span class="cm">     * from dequeueBuffer, that same fence should be passed to cancelBuffer to</span>
</span><span class='line'><span class="cm">     * ensure that future uses of the buffer are preceded by a wait on that</span>
</span><span class='line'><span class="cm">     * fence.  The caller must not use the file descriptor after it is passed</span>
</span><span class='line'><span class="cm">     * to cancelBuffer, and the ANativeWindow implementation is responsible for</span>
</span><span class='line'><span class="cm">     * closing it.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * Returns 0 on success or -errno on error.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">int</span>     <span class="p">(</span><span class="o">*</span><span class="n">cancelBuffer</span><span class="p">)(</span><span class="k">struct</span> <span class="n">ANativeWindow</span><span class="o">*</span> <span class="n">window</span><span class="p">,</span>
</span><span class='line'>                <span class="k">struct</span> <span class="n">ANativeWindowBuffer</span><span class="o">*</span> <span class="n">buffer</span><span class="p">,</span> <span class="kt">int</span> <span class="n">fenceFd</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="https://android.googlesource.com/platform/frameworks/native/+/android-l-preview_r2/opengl/include/EGL/eglplatform.h">EGLNativeWindowType</a></h3>

<figure class='code'><figcaption><span>frameworks/native/opengl/include/EGL/eglplatform.h </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#if defined(_WIN32) || defined(__VC32__) &amp;&amp; !defined(__CYGWIN__) &amp;&amp; !defined(__SCITECH_SNAP__) </span><span class="cm">/* Win32 and WinCE */</span><span class="cp"></span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="cp">#elif defined(__ANDROID__) || defined(ANDROID)</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">ANativeWindow</span><span class="o">*</span>           <span class="n">EGLNativeWindowType</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="kt">egl_native_pixmap_t</span><span class="o">*</span>     <span class="n">EGLNativePixmapType</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">void</span><span class="o">*</span>                           <span class="n">EGLNativeDisplayType</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* EGL 1.2 types, renamed for consistency in EGL 1.3 */</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">EGLNativeDisplayType</span> <span class="n">NativeDisplayType</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">EGLNativePixmapType</span>  <span class="n">NativePixmapType</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">EGLNativeWindowType</span>  <span class="n">NativeWindowType</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Native Graphic Buffer Handle</h2>

<h3><a href="https://android.googlesource.com/platform/system/core/+/android-l-preview_r2/include/cutils/native_handle.h">native_handle</a></h3>

<figure class='code'><figcaption><span>system/core/include/cutils/native_handle.h </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">native_handle</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">version</span><span class="p">;</span>        <span class="cm">/* sizeof(native_handle_t) */</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">numFds</span><span class="p">;</span>         <span class="cm">/* number of file-descriptors at &amp;data[0] */</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">numInts</span><span class="p">;</span>        <span class="cm">/* number of ints at &amp;data[numFds] */</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>        <span class="cm">/* numFds + numInts ints */</span>
</span><span class='line'><span class="p">}</span> <span class="kt">native_handle_t</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="https://android.googlesource.com/platform/system/core/+/android-l-preview_r2/include/system/window.h">ANativeWindowBuffer</a></h3>

<p>android_native_base_t, native_handle</p>

<figure class='code'><figcaption><span>system/core/include/system/window.h </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="k">const</span> <span class="kt">native_handle_t</span><span class="o">*</span> <span class="kt">buffer_handle_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">ANativeWindowBuffer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="cp">#ifdef __cplusplus</span>
</span><span class='line'>    <span class="n">ANativeWindowBuffer</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">common</span><span class="p">.</span><span class="n">magic</span> <span class="o">=</span> <span class="n">ANDROID_NATIVE_BUFFER_MAGIC</span><span class="p">;</span>
</span><span class='line'>        <span class="n">common</span><span class="p">.</span><span class="n">version</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">ANativeWindowBuffer</span><span class="p">);</span>
</span><span class='line'>        <span class="n">memset</span><span class="p">(</span><span class="n">common</span><span class="p">.</span><span class="n">reserved</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">common</span><span class="p">.</span><span class="n">reserved</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Implement the methods that sp&lt;ANativeWindowBuffer&gt; expects so that it</span>
</span><span class='line'>    <span class="c1">// can be used to automatically refcount ANativeWindowBuffer&#39;s.</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">incStrong</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span><span class="o">*</span> <span class="cm">/*id*/</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">common</span><span class="p">.</span><span class="n">incRef</span><span class="p">(</span><span class="n">const_cast</span><span class="o">&lt;</span><span class="kt">android_native_base_t</span><span class="o">*&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">common</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">decStrong</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span><span class="o">*</span> <span class="cm">/*id*/</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">common</span><span class="p">.</span><span class="n">decRef</span><span class="p">(</span><span class="n">const_cast</span><span class="o">&lt;</span><span class="kt">android_native_base_t</span><span class="o">*&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">common</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">struct</span> <span class="kt">android_native_base_t</span> <span class="n">common</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">width</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">height</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">stride</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">format</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">usage</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span><span class="o">*</span> <span class="n">reserved</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">buffer_handle_t</span> <span class="n">handle</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span><span class="o">*</span> <span class="n">reserved_proc</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span> <span class="n">ANativeWindowBuffer_t</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2><a href="https://android.googlesource.com/platform/system/core/+/android-l-preview_r2/include/utils/Flattenable.h">Flattenable</a></h2>

<figure class='code'><figcaption><span>system/core/include/utils/Flattenable.h </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * The Flattenable protocol allows an object to serialize itself out</span>
</span><span class='line'><span class="cm"> * to a byte-buffer and an array of file descriptors.</span>
</span><span class='line'><span class="cm"> * Flattenable objects must implement this protocol.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="n">template</span> <span class="o">&lt;</span><span class="kr">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">class</span> <span class="n">Flattenable</span> <span class="p">{</span>
</span><span class='line'><span class="nl">public</span><span class="p">:</span>
</span><span class='line'>    <span class="c1">// size in bytes of the flattened object</span>
</span><span class='line'>    <span class="kr">inline</span> <span class="kt">size_t</span> <span class="n">getFlattenedSize</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// number of file descriptors to flatten</span>
</span><span class='line'>    <span class="kr">inline</span> <span class="kt">size_t</span> <span class="n">getFdCount</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// flattens the object into buffer.</span>
</span><span class='line'>    <span class="c1">// size should be at least of getFlattenedSize()</span>
</span><span class='line'>    <span class="c1">// file descriptors are written in the fds[] array but ownership is</span>
</span><span class='line'>    <span class="c1">// not transfered (ie: they must be dupped by the caller of</span>
</span><span class='line'>    <span class="c1">// flatten() if needed).</span>
</span><span class='line'>    <span class="kr">inline</span> <span class="kt">status_t</span> <span class="n">flatten</span><span class="p">(</span><span class="kt">void</span><span class="o">*&amp;</span> <span class="n">buffer</span><span class="p">,</span> <span class="kt">size_t</span><span class="o">&amp;</span> <span class="n">size</span><span class="p">,</span> <span class="kt">int</span><span class="o">*&amp;</span> <span class="n">fds</span><span class="p">,</span> <span class="kt">size_t</span><span class="o">&amp;</span> <span class="n">count</span><span class="p">)</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// unflattens the object from buffer.</span>
</span><span class='line'>    <span class="c1">// size should be equal to the value of getFlattenedSize() when the</span>
</span><span class='line'>    <span class="c1">// object was flattened.</span>
</span><span class='line'>    <span class="c1">// unflattened file descriptors are found in the fds[] array and</span>
</span><span class='line'>    <span class="c1">// don&#39;t need to be dupped(). ie: the caller of unflatten doesn&#39;t</span>
</span><span class='line'>    <span class="c1">// keep ownership. If a fd is not retained by unflatten() it must be</span>
</span><span class='line'>    <span class="c1">// explicitly closed.</span>
</span><span class='line'>    <span class="kr">inline</span> <span class="kt">status_t</span> <span class="nf">unflatten</span><span class="p">(</span><span class="kt">void</span> <span class="k">const</span><span class="o">*&amp;</span> <span class="n">buffer</span><span class="p">,</span> <span class="kt">size_t</span><span class="o">&amp;</span> <span class="n">size</span><span class="p">,</span> <span class="kt">int</span> <span class="k">const</span><span class="o">*&amp;</span> <span class="n">fds</span><span class="p">,</span> <span class="kt">size_t</span><span class="o">&amp;</span> <span class="n">count</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2><a href="https://android.googlesource.com/platform/frameworks/native/+/android-l-preview_r2/include/ui/GraphicBuffer.h">GraphicBuffer</a></h2>

<figure class='code'><figcaption><span>frameworks/native/include/ui/GraphicBuffer.h </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">class</span> <span class="nl">GraphicBuffer</span>
</span><span class='line'>    <span class="p">:</span> <span class="n">public</span> <span class="n">ANativeObjectBase</span><span class="o">&lt;</span> <span class="n">ANativeWindowBuffer</span><span class="p">,</span> <span class="n">GraphicBuffer</span><span class="p">,</span> <span class="n">RefBase</span> <span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">public</span> <span class="n">Flattenable</span><span class="o">&lt;</span><span class="n">GraphicBuffer</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">friend</span> <span class="n">class</span> <span class="n">Flattenable</span><span class="o">&lt;</span><span class="n">GraphicBuffer</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'><span class="nl">private</span><span class="p">:</span>
</span><span class='line'>    <span class="n">GraphicBufferMapper</span><span class="o">&amp;</span> <span class="n">mBufferMapper</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sp</span><span class="o">&lt;</span><span class="n">ANativeWindowBuffer</span><span class="o">&gt;</span> <span class="n">mWrappedBuffer</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2><a href="https://android.googlesource.com/platform/frameworks/native/+/android-l-preview_r2/include/gui/Surface.h">Surface</a></h2>

<figure class='code'><figcaption><span>frameworks/native/include/gui/Surface.h </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * An implementation of ANativeWindow that feeds graphics buffers into a</span>
</span><span class='line'><span class="cm"> * BufferQueue.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * This is typically used by programs that want to render frames through</span>
</span><span class='line'><span class="cm"> * some means (maybe OpenGL, a software renderer, or a hardware decoder)</span>
</span><span class='line'><span class="cm"> * and have the frames they create forwarded to SurfaceFlinger for</span>
</span><span class='line'><span class="cm"> * compositing.  For example, a video decoder could render a frame and call</span>
</span><span class='line'><span class="cm"> * eglSwapBuffers(), which invokes ANativeWindow callbacks defined by</span>
</span><span class='line'><span class="cm"> * Surface.  Surface then forwards the buffers through Binder IPC</span>
</span><span class='line'><span class="cm"> * to the BufferQueue&#39;s producer interface, providing the new frame to a</span>
</span><span class='line'><span class="cm"> * consumer such as GLConsumer.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">class</span> <span class="nl">Surface</span>
</span><span class='line'>    <span class="p">:</span> <span class="n">public</span> <span class="n">ANativeObjectBase</span><span class="o">&lt;</span><span class="n">ANativeWindow</span><span class="p">,</span> <span class="n">Surface</span><span class="p">,</span> <span class="n">RefBase</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="nl">private</span><span class="p">:</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">BufferSlot</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">sp</span><span class="o">&lt;</span><span class="n">GraphicBuffer</span><span class="o">&gt;</span> <span class="n">buffer</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Region</span> <span class="n">dirtyRegion</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// mSurfaceTexture is the interface to the surface texture server. All</span>
</span><span class='line'>    <span class="c1">// operations on the surface texture client ultimately translate into</span>
</span><span class='line'>    <span class="c1">// interactions with the server using this interface.</span>
</span><span class='line'>    <span class="c1">// TODO: rename to mBufferProducer</span>
</span><span class='line'>    <span class="n">sp</span><span class="o">&lt;</span><span class="n">IGraphicBufferProducer</span><span class="o">&gt;</span> <span class="n">mGraphicBufferProducer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// mSlots stores the buffers that have been allocated for each buffer slot.</span>
</span><span class='line'>    <span class="c1">// It is initialized to null pointers, and gets filled in with the result of</span>
</span><span class='line'>    <span class="c1">// IGraphicBufferProducer::requestBuffer when the client dequeues a buffer from a</span>
</span><span class='line'>    <span class="c1">// slot that has not yet been used. The buffer allocated to a slot will also</span>
</span><span class='line'>    <span class="c1">// be replaced if the requested buffer usage or geometry differs from that</span>
</span><span class='line'>    <span class="c1">// of the buffer allocated to a slot.</span>
</span><span class='line'>    <span class="n">BufferSlot</span> <span class="n">mSlots</span><span class="p">[</span><span class="n">NUM_BUFFER_SLOTS</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// must be used from the lock/unlock thread</span>
</span><span class='line'>    <span class="n">sp</span><span class="o">&lt;</span><span class="n">GraphicBuffer</span><span class="o">&gt;</span>           <span class="n">mLockedBuffer</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sp</span><span class="o">&lt;</span><span class="n">GraphicBuffer</span><span class="o">&gt;</span>           <span class="n">mPostedBuffer</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SELinux for Android]]></title>
    <link href="http://eyan0221.github.io/blog/2014/10/28/selinux-for-android/"/>
    <updated>2014-10-28T12:02:35+08:00</updated>
    <id>http://eyan0221.github.io/blog/2014/10/28/selinux-for-android</id>
    <content type="html"><![CDATA[<h2>Reference</h2>

<ul>
<li><a href="http://selinuxproject.org/page/Main_Page">SELinux Project Wiki</a></li>
<li><a href="http://selinuxproject.org/page/NB_SEforAndroid_1">SE for Android</a></li>
<li><a href="http://seandroid.bitbucket.org/">Security Enhancements for Android</a></li>
<li><a href="http://source.android.com/devices/tech/security/se-linux.html">Validating Security-Enhanced Linux in Android</a></li>
<li><a href="http://www.youtube.com/watch?v=MxjenQ31b70">2012 Red Hat Summit: SELinux For Mere Mortals</a></li>
</ul>


<h2>Projects</h2>

<ul>
<li><a href="https://android.googlesource.com/platform/external/sepolicy/+/master/README">external/sepolicy/README</a></li>
<li>external/libselinux/</li>
<li>external/libsepol/</li>
<li>device/manufacturer/device-name/sepolicy</li>
</ul>


<h2>Control</h2>

<ul>
<li>Permissive mode</li>
</ul>


<figure class='code'><figcaption><span>BOARD_KERNEL_CMDLINE </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>androidboot.selinux=permissive</span></code></pre></td></tr></table></div></figure>


<h2><a href="http://securityblog.org/2013/06/28/se-for-android-gs4-howto-and-exploit-demo/">HowTo</a></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># reload policy
</span><span class='line'>adb remount && adb push sepolicy /data/security/
</span><span class='line'>adb shell setprop selinux.reload_policy &lt;0|1>
</span><span class='line'># toggle enforcing and permissive
</span><span class='line'>adb shell setenforce &lt;0|1|permissive|enforcing>
</span><span class='line'>adb shell getenforce</span></code></pre></td></tr></table></div></figure>


<h2>Policy</h2>

<p>The policy rules come in the form: allow domains types:classes permissions;, where:</p>

<ul>
<li>Domain - A label for the process or set of processes.</li>
<li>Type - A label for the object (e.g. file, socket) or set of objects.</li>
<li>Class - The kind of object (e.g. file, socket) being accessed.</li>
<li>Permission - The operation (e.g. read, write) being performed.</li>
</ul>


<p>And so an example use of this would follow the structure:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>allow appdomain app_data_file:file rw_file_perms;</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Machine Learning Notes]]></title>
    <link href="http://eyan0221.github.io/blog/2014/09/12/machine-learning-notes/"/>
    <updated>2014-09-12T16:58:58+08:00</updated>
    <id>http://eyan0221.github.io/blog/2014/09/12/machine-learning-notes</id>
    <content type="html"><![CDATA[<h2>Terminology</h2>

<ul>
<li><a href="http://www.netlib.org/blas/">BLAS</a> = Basic Linear Algebra Subprograms</li>
<li><a href="http://en.wikipedia.org/wiki/Convolutional_neural_network">CNNs</a> = Convolutional Neural Networks</li>
<li>DNNs = Deep Neural Networks is one of <a href="http://deeplearning.net/">Deep Learning</a> (<a href="http://en.wikipedia.org/wiki/Deep_learning">wiki</a>) architectures</li>
<li>ML = Machine Learning</li>
<li><a href="http://keeneland.gatech.edu/software/sgemm_tutorial">SGEMM</a> = Single precision, General Matrix Multiply</li>
<li><a href="http://dictionary.reference.com/browse/convolutional?s=t">Convolution</a>:  Anatomy. one of the sinuous folds or ridges of the surface of the brain.</li>
</ul>


<h2>Software links</h2>

<ul>
<li><a href="http://caffe.berkeleyvision.org/">Cafe</a> is a deep learning framework. See more in the web image <a href="http://demo.caffe.berkeleyvision.org/">demo</a></li>
<li><a href="http://torch.ch/">Torch</a> is a scientific computing network</li>
<li><a href="http://deeplearning.net/software/theano/">Theano</a> is a Python library</li>
</ul>


<h2>NVIDIA</h2>

<ul>
<li><a href="http://www.nvidia.com/object/data-science-analytics-database.html">Data Science</a></li>
<li><a href="http://www.nvidia.com/object/what-is-gpu-computing.html">GPU Computing</a></li>
<li><a href="http://www.nvidia.com/object/machine-learning.html">Machine Learning</a>

<ul>
<li><a href="http://www.nvidia.com/object/machine-learning.html#tt">Technical Talks</a></li>
</ul>
</li>
<li><a href="https://developer.nvidia.com/cuDNN">cuDNN</a> = CUDA Deep Neural Networks

<ul>
<li><a href="http://devblogs.nvidia.com/parallelforall/accelerate-machine-learning-cudnn-deep-neural-network-library/">Accelerate Machine Learning with the cuDNN Deep Neural Network Library</a></li>
</ul>
</li>
<li><a href="http://www.theregister.co.uk/2014/09/08/nvidia_machine_learning_data_library/">2014/9/8: NVIDIA builds CUDA GPU programming library for machine learning - so you don&rsquo;t have to craft a deep neural network on a graphics chipset</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tegra Graphics Debugger]]></title>
    <link href="http://eyan0221.github.io/blog/2014/09/11/tegra-graphics-debugger/"/>
    <updated>2014-09-11T11:13:25+08:00</updated>
    <id>http://eyan0221.github.io/blog/2014/09/11/tegra-graphics-debugger</id>
    <content type="html"><![CDATA[<h2>Overview</h2>

<p><a href="https://developer.nvidia.com/tegra-graphics-debugger">Tegra Graphics Debugger</a> is a free tool from NVIDIA for debugging and profiling OpenGL ES 2.0/3.0/3.1, OpenGL 4.x and <a href="http://www.pcper.com/news/General-Tech/Google-IO-2014-Android-Extension-Pack-Announced">Android Extension Pack</a>. Supported host OS are Windows 7/8, Mac OS X 10.9 and Ubuntu Linux x64 10.10/11.04/12.04. Supported target platform is <a href="http://en.wikipedia.org/wiki/Tegra#Tegra_K1">Tegra K1</a> Android.</p>

<p>As for <a href="https://developer.nvidia.com/nvidia-perfhud-es">PerfHUD ES</a>, it focus on Tegra Android platform before and include <a href="http://en.wikipedia.org/wiki/Tegra#Tegra_4">Tegra 4</a>.</p>

<p>In GTC 2014, there is a talk &ldquo;SG4116: Tegra K1 Developer Tools for Android, Sebastien Domine&rdquo; which gives introudction of Tegra Graphics Debugger. You may watch <a href="http://www.ustream.tv/recorded/51209645">online video</a> starting from 29:05 and download <a href="http://on-demand.gputechconf.com/gtc/2014/presentations/S4825-tegra-k1-dev-tools-for-android.pdf">presentation</a>.</p>

<h2>Getting Started</h2>

<p>Tegra Graphics Debugger is part of Tegra Android Development Pack which is free for <a href="https://developer.nvidia.com/gameworksdownload#?dn=tegra-android-development-pack-3-0r3">download</a>, but requires NVIDIA GameWorks <a href="https://developer.nvidia.com/sign-up-gameworks-registered-developer-program">Registered</a> Developer Program membership. You may check online document <a href="http://docs.nvidia.com/gameworks/index.html#developertools/mobile/tegra_graphics_debugger_main.htm%3FTocPath%3DDeveloper%2520Tools|Mobile%2520Developer%2520Tools|Tegra%2520Graphics%2520Debugger|_____0">here</a> or search below doc after installation.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~/NVPACK/Tegra_Graphics_Debugger/Tegra_Graphics_Debugger.pdf</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Launch Tegra Graphics Debugger</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/NVPACK/Tegra_Graphics_Debugger<span class="nv">$ </span>./tegra-gfx-debugger
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>Performance Dashboard</strong> will be the first view after established connection to target device and launch application.</li>
<li><strong>Frame Debugger</strong>: Trigger the <strong>Capture Frame</strong> button.</li>
<li><strong>Frame Profiler</strong>: From the <strong>View</strong> menu, select <strong>Profiler</strong>.</li>
<li><strong>Dynamic Shader Editing</strong>: Open the <strong>API Inspector</strong>, navigate to the <strong>Program</strong> page.</li>
</ul>


<h2>Reference</h2>

<p><a href="http://on-demand-gtc.gputechconf.com/gtcnew/on-demand-gtc.php">GPU Technology Conference On-Demand</a> <br/>
<a href="https://developer.nvidia.com/tegra-android-development-pack">Tegra Android Development Pack</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Kernel]]></title>
    <link href="http://eyan0221.github.io/blog/2014/09/10/linux-kernel/"/>
    <updated>2014-09-10T15:11:33+08:00</updated>
    <id>http://eyan0221.github.io/blog/2014/09/10/linux-kernel</id>
    <content type="html"><![CDATA[<h2>Terminology</h2>

<ul>
<li><a href="http://devicetree.org/Device_Tree_Usage">Device Tree</a></li>
<li><a href="http://man7.org/linux/man-pages/man3/errno.3.html">errno</a></li>
<li><a href="https://www.kernel.org/doc/readme/drivers-gpu-drm-README.drm">DRM = Direct Rendering Manager</a></li>
<li><a href="https://www.kernel.org/doc/htmldocs/drm/">Linux DRM Developer Guide</a></li>
<li><a href="https://www.kernel.org/doc/htmldocs/drm/drm-kms-init.html">KMS = Kernel Mode Setting</a></li>
<li><a href="http://lwn.net/Articles/565422/">ADF = Atomic Display Framework</a></li>
<li><a href="http://www.phoronix.com/scan.php?page=news_item&amp;px=MTE3NTU">KMSCUBE</a></li>
<li><a href="http://kovyrin.net/2006/04/13/epoll-asynchronous-network-programming/">epoll</a></li>
</ul>


<h2>IPC</h2>

<ul>
<li><a href="http://kroah.com/log/blog/2014/01/15/kdbus-details/">Kdbus</a></li>
<li><a href="http://tldp.org/LDP/lpg/node7.html">Linux IPC</a></li>
<li><a href="http://elinux.org/Android_Binder">Binder</a></li>
<li><a href="http://www.linuxdevcenter.com/pub/a/linux/2007/05/24/semaphores-in-linux.html?page=5">Semaphore</a></li>
<li><a href="http://www.thegeekstuff.com/2012/03/catch-signals-sample-c-code/">Signals</a></li>
</ul>


<h2>Optimization</h2>

<ul>
<li><a href="http://www.linux.com/news/featured-blogs/200-libby-clark/710319-intro-to-real-time-linux-for-embedded-developers">Introduction to Real Time Linux</a></li>
<li><a href="http://elinux.org/Kernel_Size_Tuning_Guide">Kernel Size Tuning Guide</a></li>
</ul>


<h2>Debugger</h2>

<ul>
<li><p>kgdb</p></li>
<li><p><a href="https://sourceware.org/gdb/current/onlinedocs/gdb/index.html#SEC_Contents">gdb</a> on android</p></li>
</ul>


<figure class='code'><figcaption><span>Target </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$gdbserver</span> :1234 --attach &lt;pid&gt;
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Host </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$adb</span> forward tcp:1234 tcp:1234
</span><span class='line'><span class="nv">$&lt;</span>path&gt;/arm-eabi-gdb &lt;path&gt;/symbols/system/bin/app_process32
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> <span class="nb">set </span>solib-search-path &lt;path to out&gt;/symbols/system/lib:&lt;path to out&gt;/symbols/system/vendor/lib/
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> <span class="nb">set </span>solib-absolute-prefix &lt;path to out&gt;/symbols/
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> target remote :1234
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> b &lt;symbol&gt;                <span class="c"># set break point</span>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> b &lt;address&gt;               <span class="c"># set break point</span>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> b &lt;symbol&gt; <span class="k">if</span> &lt;condition&gt; <span class="c"># set conditional break point</span>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> i b                       <span class="c"># list break points</span>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> d &lt;id&gt;                    <span class="c"># delete break point with &lt;id&gt;</span>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> bt                        <span class="c"># print backtrace</span>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> s                         <span class="c"># step into</span>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> n                         <span class="c"># step over</span>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> c                         <span class="c"># continue</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>strace</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$strace</span> -tt -o&lt;log&gt; &lt;executable&gt;
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://www.kernel.org/doc/Documentation/usb/usbmon.txt">usbmon</a></li>
</ul>


<figure class='code'><figcaption><span>.config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">CONFIG_USB_DEBUG</span><span class="o">=</span><span class="n">y</span>
</span><span class='line'><span class="n">CONFIG_USB_MON</span><span class="o">=</span><span class="n">y</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>kernel/drivers/usb/host/ehci-xxx.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define DEBUG</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>check bus id </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat /sys/kernel/debug/usb/devices
</span><span class='line'>T:  <span class="nv">Bus</span><span class="o">=</span><span class="m">03</span> <span class="nv">Lev</span><span class="o">=</span><span class="m">01</span> <span class="nv">Prnt</span><span class="o">=</span><span class="m">01</span> <span class="nv">Port</span><span class="o">=</span><span class="m">00</span> <span class="nv">Cnt</span><span class="o">=</span><span class="m">01</span> Dev#<span class="o">=</span>  <span class="m">2</span> <span class="nv">Spd</span><span class="o">=</span><span class="m">12</span>  <span class="nv">MxCh</span><span class="o">=</span> 0
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>get raw text trace from <bus id> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$cat</span> /sys/kernel/debug/usb/usbmon/&lt;bus id&gt;u &gt; &lt;log&gt;
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>lowlevel Debug</li>
</ul>


<figure class='code'><figcaption><span>.config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">CONFIG_DEBUG_LL</span><span class="o">=</span><span class="n">y</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://www.kernel.org/doc/Documentation/kmemleak.txt">kmemleak</a></li>
</ul>


<p>Step1: rebuild/flash kernel</p>

<figure class='code'><figcaption><span>.config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">CONFIG_DEBUG_KMEMLEAK</span><span class="o">=</span><span class="n">y</span>
</span></code></pre></td></tr></table></div></figure>


<p>Step2: Get memory leak information</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$cat</span> /sys/kernel/debug/kmemleak          <span class="c"># get log</span>
</span><span class='line'><span class="nv">$echo</span> scan &gt; /sys/kernel/debug/kmemleak  <span class="c"># trigger memory scan</span>
</span><span class='line'><span class="nv">$echo</span> clear &gt; /sys/kernel/debug/kmemleak <span class="c"># clear memory leaks</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>debug_slab</li>
</ul>


<p>Step1: Revert this commit</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>commit 3ff84a7f36554b257cd57325b1a7c1fa4b49fbe3
</span><span class='line'>Author: Pekka Enberg &lt;penberg@kernel.org&gt;
</span><span class='line'>Date:  Mon Feb 14 17:46:21 2011 +0200
</span><span class='line'>
</span><span class='line'>   Revert "slab: Fix missing DEBUG_SLAB last user"</span></code></pre></td></tr></table></div></figure>


<p>Step2: rebuild/flash kernel</p>

<figure class='code'><figcaption><span>.config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">CONFIG_DEBUG_SLAB</span><span class="o">=</span><span class="n">y</span>
</span><span class='line'><span class="n">CONFIG_DEBUG_SLAB_LEAK</span><span class="o">=</span><span class="n">y</span>
</span></code></pre></td></tr></table></div></figure>


<p>Step3: Get slab information</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$cat</span> /proc/slab_allocators
</span><span class='line'><span class="nv">$cat</span> /proc/slabinfo
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>irqsoff tracer</li>
</ul>


<p>Step1: rebuild/flash kernel</p>

<figure class='code'><figcaption><span>.config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">CONFIG_IRQSOFF_TRACER</span><span class="o">=</span><span class="n">y</span>
</span></code></pre></td></tr></table></div></figure>


<p>Step2: testing</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$echo</span> irqsoff &gt; /d/tracing/current_tracer
</span><span class='line'><span class="nv">$echo</span> <span class="m">0</span> &gt; /sys/kernel/debug/tracing/tracing_max_latency
</span><span class='line'><span class="c"># start testing</span>
</span><span class='line'><span class="nv">$cat</span> /sys/kernel/debug/tracing/tracing_max_latency
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://www.kernel.org/doc/Documentation/trace/ftrace.txt">ftrace</a></li>
</ul>


<p>Step1: rebuild/flash kernel</p>

<figure class='code'><figcaption><span>.config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">CONFIG_DYNAMIC_FTRACE</span><span class="o">=</span><span class="n">y</span>
</span><span class='line'><span class="n">CONFIG_FTRACE</span><span class="o">=</span><span class="n">y</span>
</span><span class='line'><span class="n">CONFIG_FUNCTION_TRACER</span><span class="o">=</span><span class="n">y</span>
</span></code></pre></td></tr></table></div></figure>


<p>Step2: testing</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$echo</span> &lt;pid&gt; &gt; /d/tracing/set_ftrace_pid
</span><span class='line'><span class="nv">$echo</span> <span class="k">function</span> &gt; /d/tracing/current_tracer
</span><span class='line'><span class="c"># start testing</span>
</span><span class='line'><span class="nv">$cat</span> /d/tracing/trace_pipe
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://perf.wiki.kernel.org/index.php/Main_Page">perf</a></li>
</ul>


<p>Step1: rebuild/flash kernel</p>

<figure class='code'><figcaption><span>.config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">CONFIG_HAVE_PERF_EVENTS</span><span class="o">=</span><span class="n">y</span>
</span><span class='line'><span class="n">CONFIG_PERF_EVENTS</span><span class="o">=</span><span class="n">y</span>
</span><span class='line'><span class="n">CONFIG_PROFILING</span><span class="o">=</span><span class="n">y</span>
</span><span class='line'><span class="n">CONFIG_OPROFILE</span><span class="o">=</span><span class="n">y</span>
</span><span class='line'><span class="n">CONFIG_HW_PERF_EVENTS</span><span class="o">=</span><span class="n">y</span>
</span></code></pre></td></tr></table></div></figure>


<p>Step2: testing</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># push library symbol</span>
</span><span class='line'><span class="nv">$perf</span> record -g -f -p &lt;pid&gt;
</span><span class='line'><span class="nv">$perf</span> report --sort dso,symbol &gt;output.txt
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://android.googlesource.com/kernel/tegra/+/android-tegra-3.10/Documentation/trace/tracedump.txt">Tracedump</a></li>
</ul>


<figure class='code'><figcaption><span>.config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">CONFIG_TRACING</span><span class="o">=</span><span class="n">y</span>
</span><span class='line'><span class="n">CONFIG_FUNCTION_TRACER</span><span class="o">=</span><span class="n">y</span>
</span><span class='line'><span class="n">CONFIG_TRACEDUMP_PANIC</span><span class="o">=</span><span class="n">y</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>kernel/trace/tracedump.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">format_ascii</span> <span class="o">=</span> <span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$cd</span> /sys/kernel/debug/tracing
</span><span class='line'><span class="nv">$echo</span> <span class="k">function</span> &gt; current_tracer
</span><span class='line'><span class="nv">$echo</span> <span class="m">1</span> &gt; /proc/sys/kernel/ftrace_dump_on_oops
</span></code></pre></td></tr></table></div></figure>


<h2>Code Snippet</h2>

<ul>
<li><a href="http://kernelnewbies.org/FAQ/LikelyUnlikely">LIKELY and UNLIKELY</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define LIKELY( exp )       (__builtin_expect( (exp) != 0, true  ))</span>
</span><span class='line'><span class="cp">#define UNLIKELY( exp )     (__builtin_expect( (exp) != 0, false ))</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Kenrel independent build</li>
</ul>


<figure class='code'><figcaption><span>kernel/kernel/module.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">diff</span> <span class="o">--</span><span class="n">git</span> <span class="n">a</span><span class="o">/</span><span class="n">kernel</span><span class="o">/</span><span class="n">module</span><span class="p">.</span><span class="n">c</span> <span class="n">b</span><span class="o">/</span><span class="n">kernel</span><span class="o">/</span><span class="n">module</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="n">index</span> <span class="mi">3</span><span class="n">b5a5d6</span><span class="p">.</span><span class="mf">.5</span><span class="n">b35c69</span> <span class="mi">100644</span>
</span><span class='line'><span class="o">---</span> <span class="n">a</span><span class="o">/</span><span class="n">kernel</span><span class="o">/</span><span class="n">module</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="o">+++</span> <span class="n">b</span><span class="o">/</span><span class="n">kernel</span><span class="o">/</span><span class="n">module</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="err">@@</span> <span class="o">-</span><span class="mi">2704</span><span class="p">,</span><span class="mi">7</span> <span class="o">+</span><span class="mi">2704</span><span class="p">,</span><span class="mi">6</span> <span class="err">@@</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">check_modinfo</span><span class="p">(</span><span class="k">struct</span> <span class="n">module</span> <span class="o">*</span><span class="n">mod</span><span class="p">,</span> <span class="k">struct</span> <span class="n">load_info</span> <span class="o">*</span><span class="n">info</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">same_magic</span><span class="p">(</span><span class="n">modmagic</span><span class="p">,</span> <span class="n">vermagic</span><span class="p">,</span> <span class="n">info</span><span class="o">-&gt;</span><span class="n">index</span><span class="p">.</span><span class="n">vers</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">printk</span><span class="p">(</span><span class="n">KERN_ERR</span> <span class="s">&quot;%s: version magic &#39;%s&#39; should be &#39;%s&#39;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>                       <span class="n">mod</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">,</span> <span class="n">modmagic</span><span class="p">,</span> <span class="n">vermagic</span><span class="p">);</span>
</span><span class='line'><span class="o">-</span>               <span class="k">return</span> <span class="o">-</span><span class="n">ENOEXEC</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">get_modinfo</span><span class="p">(</span><span class="n">info</span><span class="p">,</span> <span class="s">&quot;intree&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu Tips]]></title>
    <link href="http://eyan0221.github.io/blog/2014/09/09/ubuntu-tips/"/>
    <updated>2014-09-09T18:35:34+08:00</updated>
    <id>http://eyan0221.github.io/blog/2014/09/09/ubuntu-tips</id>
    <content type="html"><![CDATA[<h2>bash</h2>

<p><a href="http://askubuntu.com/questions/161249/bashrc-not-executed-when-opening-new-terminal">Run bash terminal as a login shell</a></p>

<figure class='code'><figcaption><span>~/.profile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if</span> <span class="o">[</span> -n <span class="s2">&quot;$BASH_VERSION&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="c"># include .bashrc if it exists</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> -f <span class="s2">&quot;$HOME/.bashrc&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>        . <span class="s2">&quot;$HOME/.bashrc&quot;</span>
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<h2>vim</h2>

<p><img src="http://www.viemu.com/vi-vim-cheat-sheet.gif" alt="vim cheatsheet" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.               # Position of the last change
</span><span class='line'>' or `          # Position before last jump
</span><span class='line'>`. or '.        # Go back to last edit top
</span><span class='line'>:               # command mode
</span><span class='line'>:set paste      # auto indent for code paste
</span><span class='line'>:set number     # display line number
</span><span class='line'>:1,$s/&lt;target string&gt;/&lt;replace string&gt;/ # replace strings</span></code></pre></td></tr></table></div></figure>


<h2><a href="http://softsmith.blogspot.tw/2009/01/vim-cscope-trace.html">cscope</a></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cscope -bkR     # create tags
</span><span class='line'>ctrl-]          # go to symbol
</span><span class='line'>ctrl-t          # return to last tag stack</span></code></pre></td></tr></table></div></figure>


<h2><a href="http://blog.longwin.com.tw/2011/04/tmux-learn-screen-config-2011/">tmux</a></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tmux ls                             # list tmux sessions
</span><span class='line'>tmux new session -s [session name]  # create new session
</span><span class='line'>tmux attach -t [session name]       # attach session
</span><span class='line'>ctrl-b + c                          # create new window
</span><span class='line'>ctrl-b + ,                          # rename window
</span><span class='line'>ctrl-b + w                          # switch windows
</span><span class='line'>ctrl-b + s                          # switch sessions</span></code></pre></td></tr></table></div></figure>


<h2><a href="http://www.suse.url.tw/sles10/lesson10.htm%20shell">shellscript</a></h2>

<figure class='code'><figcaption><span>declare integer </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">declare</span> -i <span class="nv">y</span><span class="o">=</span>10
</span><span class='line'><span class="nb">declare</span> -i <span class="nv">z</span><span class="o">=</span>0
</span><span class='line'><span class="nv">z</span><span class="o">=</span><span class="k">$((</span> x <span class="o">+</span> y <span class="k">))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>while loop </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">loop</span><span class="o">=</span>0
</span><span class='line'><span class="k">while</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="nv">loop</span><span class="o">=</span><span class="k">$((</span><span class="nv">$loop</span><span class="o">+</span><span class="m">1</span><span class="k">))</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$loop</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>rename folder </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">for</span> NAME in <span class="sb">`</span>ls<span class="sb">`</span><span class="p">;</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'>    <span class="nv">NEWNAME</span><span class="o">=</span><span class="sb">`</span><span class="nb">echo</span> <span class="nv">$NAME</span> <span class="p">|</span> tr -d <span class="s1">&#39;bug&#39;</span><span class="sb">`</span><span class="p">;</span>
</span><span class='line'>    mv <span class="nv">$NAME</span> <span class="nv">$NEWNAME</span><span class="p">;</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<h2>remote desktop</h2>

<ul>
<li>Access Windows OS Desktop</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rdesktop -u <span class="s2">&quot;[domain name]\[account]&quot;</span> -g 1920x1080 -D <span class="o">[</span>ip address<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Access Ubuntu Shared Folders</li>
</ul>


<p>Check <a href="http://www.7tutorials.com/how-access-ubuntu-shared-folders-windows-7">link</a></p>

<h2>mount</h2>

<ul>
<li>Samba</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install cifs-utils
</span><span class='line'>sudo mkdir /media/test/
</span><span class='line'>sudo mount.cifs //<span class="o">[</span>path to share folder<span class="o">]</span> /media/test/ -o <span class="nv">username</span><span class="o">=[</span>account<span class="o">]</span>,password<span class="o">=</span><span class="s2">&quot;[password]&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ISO Image</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo mkdir /media/iso/
</span><span class='line'>sudo mount <span class="o">[</span>file<span class="o">]</span>.iso /media/iso/ -t iso9660 -o loop
</span></code></pre></td></tr></table></div></figure>


<h2>Useful utility</h2>

<ul>
<li>man: on-line reference manuals interface</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$man</span> -f &lt;utility<span class="p">|</span><span class="k">function</span>&gt;
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>axel: A light download accelerator for Linux</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$axel</span> -n &lt;number of connections&gt; &lt;link to file&gt;
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>gqview: read raw file</p></li>
<li><p>ffmpeg: strip video from file</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ffmpeg</span> -i sling60.ts -an -vcodec copy avc.ts
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>date</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$date</span> +%G%m%d-%H%M%S
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>tcpdump</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$tcpdump</span> -i any -s <span class="m">2048</span> -tt -n -vvv -xX -w &lt;log.txt&gt;
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android]]></title>
    <link href="http://eyan0221.github.io/blog/2014/09/09/android-tools/"/>
    <updated>2014-09-09T16:44:09+08:00</updated>
    <id>http://eyan0221.github.io/blog/2014/09/09/android-tools</id>
    <content type="html"><![CDATA[<h2><a href="https://source.android.com/source/build-numbers.html">Codenames</a></h2>

<h2><a href="https://www.google.com/events/io/">Google I/O</a></h2>

<ul>
<li><a href="https://developers.google.com/events/io/2013/sessions">2013</a></li>
<li><a href="https://developers.google.com/events/io/2012/">2012</a></li>
</ul>


<h2>Debug</h2>

<ul>
<li><a href="http://developer.android.com/tools/help/systrace.html">Systrace</a></li>
<li><a href="http://developer.android.com/tools/help/uiautomator/index.html">uiautomator</a></li>
<li><a href="http://sujaiantony.wordpress.com/">Memory leak debugging with libc</a></li>
<li><a href="http://elinux.org/Android_Memory_Usage">Android Memory Usage</a></li>
<li><a href="http://elinux.org/Android_logger">Logger</a></li>
<li><a href="http://stackoverflow.com/questions/1069066/how-can-i-get-the-current-stack-trace">CallStack in Java</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.lang.Thread</span>
</span><span class='line'><span class="n">Thread</span><span class="o">.</span><span class="na">dumpStack</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="http://stackoverflow.com/questions/11470190/how-to-use-callstack-in-callstack-tpp-in-a-executable-on-android-platform">CallStack in C/C++</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;utils/CallStack.h&gt;</span>
</span><span class='line'><span class="n">CallStack</span> <span class="n">stack</span><span class="p">;</span>
</span><span class='line'><span class="n">stack</span><span class="p">.</span><span class="n">dump</span><span class="p">(</span><span class="s">&quot;[log prefix]&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>KeyEvent</li>
</ul>


<p>Find keycode in <a href="https://android.googlesource.com/platform/frameworks/base.git/+/076357b8567458d4b6dfdcf839ef751634cd2bfb/core/java/android/view/KeyEvent.java#27">frameworks/base/core/java/android/view/KeyEvent.java</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$adb</span> shell input keyevent <span class="o">[</span>key code<span class="o">]</span>
</span><span class='line'><span class="nv">$adb</span> shell input keyevent <span class="m">27</span>    <span class="c"># camera</span>
</span><span class='line'><span class="nv">$adb</span> shell input keyevent <span class="m">82</span>    <span class="c"># unlock screen</span>
</span><span class='line'><span class="nv">$adb</span> shell input text <span class="s2">&quot;ANDROID&quot;</span> <span class="c"># input string</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Optimization</h2>

<ul>
<li><p><a href="http://www.slideshare.net/kanru/android-boot-time-optimization">Boot time</a></p></li>
<li><p><a href="http://elinux.org/Using_Bootchart_on_Android">bootchart</a></p></li>
</ul>


<p>Step1: Installing the bootchart tool</p>

<p>Download <a href="http://www.bootchart.org/download.html">bootchart</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$tar</span> xjf bootchart-0.9.tar.bz2
</span><span class='line'><span class="nv">$cd</span> bootchart-0.9
</span><span class='line'><span class="nv">$sudo</span> ./install.sh
</span></code></pre></td></tr></table></div></figure>


<p>Step2: Compile init with bootchart enabled and flash images</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$touch</span> <span class="o">[</span>mydroid<span class="o">]</span>/system/core/init/init.c
</span><span class='line'><span class="nv">$export</span> <span class="nv">INIT_BOOTCHART</span><span class="o">=</span><span class="nb">true</span>
</span><span class='line'><span class="nv">$m</span> init ramdisk bootimage
</span></code></pre></td></tr></table></div></figure>


<p>Step3: Trigger bootchart</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$adb</span> shell <span class="s1">&#39;echo 20 &gt; /data/bootchart-start&#39;</span>
</span><span class='line'><span class="nv">$adb</span> shell mkdir /data/bootchart
</span></code></pre></td></tr></table></div></figure>


<p>Step4: Get bootchart.tgz</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$/</span>system/core/init/grab-bootchart.sh
</span></code></pre></td></tr></table></div></figure>


<p>Step5: Generate bootchart image</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$java</span> -jar <span class="o">[</span>path to bootchart<span class="o">]</span>/bootchart-0.9/bootchart.jar bootchart.tgz
</span></code></pre></td></tr></table></div></figure>


<h2>Display</h2>

<ul>
<li><p><a href="https://www.sven.de/dpi/">DPI Calculator</a></p></li>
<li><p>Display Timeout</p></li>
</ul>


<figure class='code'><figcaption><span>set display timeout and stay awake </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$adb</span> shell
</span><span class='line'><span class="c">#sqlite3 /data/data/com.android.providers.settings/databases/settings.db</span>
</span><span class='line'><span class="c">#.databases</span>
</span><span class='line'><span class="c">#.tables</span>
</span><span class='line'><span class="c">#.dump</span>
</span><span class='line'><span class="c">#select * from &lt;table&gt;;</span>
</span><span class='line'><span class="c">#delete from &lt;table&gt; where &lt;condition&gt;;</span>
</span><span class='line'><span class="c">#update system set value=&quot;1800000&quot; where name=&quot;screen_off_timeout&quot;;</span>
</span><span class='line'><span class="c">#update system set value=&quot;3&quot; where name=&quot;stay_on_while_plugged_in&quot;;</span>
</span><span class='line'><span class="c">#.exit</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Code Snippet</h2>

<ul>
<li>Property Permission</li>
</ul>


<p><a href="https://android.googlesource.com/platform/system/core/+/fb1c9cf6fa4efafb3e0c6b0bc93c7f087d926a48/init/property_service.c#58">system/core/init/property_service.c</a></p>

<ul>
<li>Device ID</li>
</ul>


<figure class='code'><figcaption><span>Device ID </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$adb</span> shell cat /sys/class/android_usb/android0/iSerial
</span><span class='line'><span class="nv">$adb</span> shell getprop ro.serialno
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>out/target/product/[target name]/recovery/root/init.rc </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">write</span> <span class="o">/</span><span class="n">sys</span><span class="o">/</span><span class="n">class</span><span class="o">/</span><span class="n">android_usb</span><span class="o">/</span><span class="n">android0</span><span class="o">/</span><span class="n">iSerial</span> <span class="err">$</span><span class="p">{</span><span class="n">ro</span><span class="p">.</span><span class="n">serialno</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>system/core/init/init.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">property_set</span><span class="p">(</span><span class="s">&quot;ro.serialno&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Others</h2>

<figure class='code'><figcaption><span>Open Browser with url </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$adb</span> shell am start <span class="o">[</span>url<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Start Java App </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$adb</span> shell am start -n <span class="o">[</span>com.package.name<span class="o">]</span>/<span class="o">[</span>com.package.name.ActivityName<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Playback Video </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$adb</span> shell am start -a android.intent.action.VIEW -d ////<span class="o">[</span>path to video<span class="o">]</span>/<span class="o">[</span>video file name<span class="o">]</span> -t video/* -n com.android.gallery3d/.app.MovieActivity
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SurfaceFlinger]]></title>
    <link href="http://eyan0221.github.io/blog/2014/09/09/surfaceflinger/"/>
    <updated>2014-09-09T15:54:50+08:00</updated>
    <id>http://eyan0221.github.io/blog/2014/09/09/surfaceflinger</id>
    <content type="html"><![CDATA[<h2>Dump of SERVICE SurfaceFlinger</h2>

<p>Find more information about <a href="https://source.android.com/devices/tech/input/dumpsys.html">dumpsys</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adb shell dumpsys SurfaceFlinger
</span></code></pre></td></tr></table></div></figure>


<h2>Frame Latency</h2>

<figure class='code'><figcaption><span>Prints information about last 128 frames displayed in specific window </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adb shell dumpsys SurfaceFlinger --latency <span class="o">[</span>window name<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>According to <a href="https://android.googlesource.com/platform/external/chromium_org/+/d0247b1/build/android/pylib/perf/surface_stats_collector.py#215">output definitive</a>,
The data returned looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>16954612
</span><span class='line'>7657467895508 7657482691352 7657493499756
</span><span class='line'>7657484466553 7657499645964 7657511077881
</span><span class='line'>7657500793457 7657516600576 7657527404785
</span><span class='line'>(...)</span></code></pre></td></tr></table></div></figure>


<p>The first line is the refresh period (here 16.95 ms), it is followed
by 128 lines w/ 3 timestamps in nanosecond each:</p>

<p>A) when the app started to draw <br/>
B) the vsync immediately preceding SF submitting the frame to the h/w <br/>
C) timestamp immediately after SF submitted that frame to the h/w <br/></p>

<p>The difference between the 1st and 3rd timestamp is the frame-latency.</p>

<h2>Observe composite rate in logcat</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adb shell service call SurfaceFlinger <span class="m">1001</span> i32 1
</span></code></pre></td></tr></table></div></figure>


<h2>Force using SurfaceFlinger as compositor</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adb shell service call SurfaceFlinger <span class="m">1008</span> i32 1
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Tips]]></title>
    <link href="http://eyan0221.github.io/blog/2014/09/05/git-tips/"/>
    <updated>2014-09-05T22:04:26+08:00</updated>
    <id>http://eyan0221.github.io/blog/2014/09/05/git-tips</id>
    <content type="html"><![CDATA[<ul>
<li><a href="https://source.android.com/source/using-repo.html">Repo command reference</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>repo forall -c "pwd && git status" 2&gt;&1 | tee status.txt    # check status for each project</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Find commit list which contains [function]</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git show `git log --oneline [path-to-file] | cut -c 1-8` | egrep -rs "[function]|commit"</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Search</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git log --oneline --author=[email]
</span><span class='line'>git branch --contains [commit id]
</span><span class='line'>git log -S"keyword" [path-to-file]</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Change Author</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git commit --amend --author=[email]</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Rebase</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git rebase -i HEAD~[number_of_commits]
</span><span class='line'>edit
</span><span class='line'>git commit --amend
</span><span class='line'>git rebase --continue</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Reset</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git reset --hard [commit-id]
</span><span class='line'>git reset --soft @{1}
</span><span class='line'>git reset --hard HEAD
</span><span class='line'>git reset --hard HEAD^</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Remote</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git branch -r
</span><span class='line'>git remote show origin</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Diff</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git log --oneline [tag1]..[tag2]
</span><span class='line'>git log --oneline [branch1]..[branch2]</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Patch</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git format-patch &lt;commit id&gt;^!  # generate patch w.r.t. commit id
</span><span class='line'>git format-patch -1             # generate patch w.r.t. top commit
</span><span class='line'>git cherry-pick &lt;commit id&gt;     # cherry pick commit</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github Pages and Octopress]]></title>
    <link href="http://eyan0221.github.io/blog/2014/09/05/github-page-and-octopress/"/>
    <updated>2014-09-05T17:37:05+08:00</updated>
    <id>http://eyan0221.github.io/blog/2014/09/05/github-page-and-octopress</id>
    <content type="html"><![CDATA[<p>One way to create and write your own blog.</p>

<h2>Create new repository in github</h2>

<p>For example, eyan0221.github.io.git</p>

<h2>Install rvm</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -L https://get.rvm.io | bash -s stable
</span><span class='line'>rvm install 1.9.3
</span><span class='line'>rvm use 1.9.3
</span><span class='line'>ruby --version</span></code></pre></td></tr></table></div></figure>


<h2>Setup Octopress</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>cd octopress/
</span><span class='line'>gem install bundler
</span><span class='line'>bundle install
</span><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>


<h2>Deploy Github Pages</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install nodejs
</span><span class='line'>rake setup_github_pages
</span><span class='line'>rake new_post
</span><span class='line'>rake preview        # check output in http://localhost:4000
</span><span class='line'>rake generate
</span><span class='line'>rake deploy
</span><span class='line'>git push git@github.com:eyan0221/eyan0221.github.io.git source</span></code></pre></td></tr></table></div></figure>


<h2>Reference</h2>

<ol>
<li><a href="http://zerodie.github.io/blog/2012/01/19/octopress-github-pages/">zerodie Github</a></li>
<li><a href="http://octopress.org/docs/setup/">Octopress Setup</a></li>
<li><a href="http://daringfireball.net/projects/markdown/syntax">Markdown Syntax</a></li>
<li><a href="http://en.wikipedia.org/wiki/Markdown">Markdown Wiki</a></li>
<li><a href="http://brizzled.clapper.org/blog/2012/02/04/generating-a-table-of-contents-in-octopress/">TOC in Octopress</a></li>
<li><a href="https://github.com/bmc/brizzled">brizzled github</a></li>
<li><a href="http://jkamenik.github.io/blog/2013/07/07/octopress-toc/">Another Octopress TOC</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
